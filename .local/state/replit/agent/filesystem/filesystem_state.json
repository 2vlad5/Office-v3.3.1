{"file_contents":{"Program.cs":{"content":"Ôªøusing System;\nusing System.Windows.Forms;\nusing officeApp.DataAccess;\nusing officeApp.Forms;\n\nnamespace officeApp\n{\n    internal static class Program\n    {\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n\n            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏\n            string connectionInfo = DatabaseHelper.GetConnectionInfo();\n            MessageBox.Show($\"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\\n{connectionInfo}\", \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏\");\n\n            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n            if (!DatabaseHelper.TestConnection())\n            {\n                MessageBox.Show(\"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.\\n\\n\" +\n                               \"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\\n\" +\n                               \"1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ App.config\\n\" +\n                               \"2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\\n\" +\n                               \"3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è\\n\" +\n                               \"4. –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\",\n                               \"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\",\n                               MessageBoxButtons.OK,\n                               MessageBoxIcon.Error);\n                return;\n            }\n\n            MessageBox.Show(\"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\", \"–£—Å–ø–µ—Ö\",\n                          MessageBoxButtons.OK, MessageBoxIcon.Information);\n\n            Application.Run(new LoginForm());\n        }\n    }\n}","size_bytes":1888},"replit.md":{"content":"# OfficeApp\n\n## Overview\n\nOfficeApp is a .NET-based office management application that appears to have both console and Windows Forms components. The project is built on .NET 8.0 and uses MySQL as its primary database solution. The application seems designed to handle office-related operations with a focus on user authentication and data management through a combination of console utilities and desktop interface components.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Application Structure\nThe project follows a multi-project .NET solution architecture with separate console and desktop application components:\n\n- **Console Application (OfficeApp.Console)**: Built on .NET 8.0, likely serves as a command-line utility or background service for administrative tasks\n- **Desktop Application**: Windows Forms-based GUI application with user authentication features (LoginForm)\n\n### Database Architecture\nThe system uses MySQL as the primary database with the following design decisions:\n\n- **MySqlConnector**: Modern, high-performance MySQL driver chosen over the legacy MySql.Data connector\n- **Version Strategy**: Uses MySqlConnector 2.4.0 with flexible versioning to allow minor updates\n- **Connection Management**: Leverages Microsoft Extensions for dependency injection and logging abstractions\n\n### Technology Stack\n- **Runtime**: .NET 8.0 (latest LTS version for enhanced performance and security)\n- **Database**: MySQL with MySqlConnector for optimal async performance\n- **UI Framework**: Windows Forms for desktop interface\n- **Dependency Management**: Microsoft Extensions for IoC container and logging abstractions\n\n### Design Patterns\n- **Dependency Injection**: Uses Microsoft.Extensions.DependencyInjection.Abstractions for loose coupling\n- **Logging**: Implements Microsoft.Extensions.Logging.Abstractions for centralized logging strategy\n- **Separation of Concerns**: Console and desktop applications are separated into distinct projects\n\n### Build and Deployment\n- **Target Framework**: .NET 8.0 for modern language features and performance improvements\n- **Package Management**: NuGet with PackageReference style for better dependency resolution\n- **Configuration**: Uses standard .NET configuration management with runtime configuration files\n\n## External Dependencies\n\n### Database Services\n- **MySQL Database**: Primary data storage solution requiring MySQL server instance\n- **MySqlConnector 2.4.0**: High-performance MySQL ADO.NET driver with async support\n\n### Microsoft Extensions\n- **Microsoft.Extensions.DependencyInjection.Abstractions 8.0.2**: Provides IoC container abstractions\n- **Microsoft.Extensions.Logging.Abstractions 8.0.2**: Enables structured logging capabilities\n\n### Runtime Dependencies\n- **.NET 8.0 Runtime**: Requires .NET 8.0 runtime environment for application execution\n- **Windows Forms**: Desktop UI framework dependency for GUI components\n\n### Development Tools\n- **NuGet Package Manager**: For dependency management and package restoration\n- **MSBuild**: Build system for compilation and project management\n\n## Recent Changes (September 2025)\n\n### Warehouse Module Enhancements\n\nThe warehouse module has been completely redesigned and optimized with the following improvements:\n\n#### Database Schema Updates\n- **New Table Integration**: Enhanced integration with `office_storage_options` table for dynamic configuration\n- **Enable Filtering**: Added support for `enable=1` filtering to show only active options\n- **Type Management**: Implemented product type management through option_type='type' entries\n- **Group Management**: Dynamic group management through option_type='group' entries\n\n#### Performance Optimizations\n- **UI Performance**: Eliminated N+1 query problems in DataGridView cell formatting by preloading product types via efficient JOIN queries\n- **Caching Strategy**: Added Type property to Product model for in-memory caching, preventing database calls during UI rendering\n- **Optimized Queries**: Updated ProductRepository methods to use single JOIN queries instead of multiple database calls\n\n#### Security Enhancements\n- **Credential Management**: Removed hardcoded database credentials from console application\n- **Environment Variables**: Implemented secure credential management using DATABASE_CONNECTION_STRING environment variable\n- **Information Masking**: Added sensitive information masking in application logs for production safety\n\n#### Special Product Type Handling\n- **\"–û–±—Ä–∞–∑\" Type Logic**: Implemented special handling for products with type \"–û–±—Ä–∞–∑\" to disable stock level color highlighting\n- **Conditional UI Behavior**: Products of type \"–û–±—Ä–∞–∑\" now maintain standard colors regardless of stock quantity\n\n#### New Repository Methods\n- **GetProductType**: Retrieves product type by joining storage and options tables\n- **IsProductTypeObraz**: Checks if product is of type \"–û–±—Ä–∞–∑\" for UI conditional logic\n- **AddGroupToOptions**: Dynamically adds new product groups to options table\n- **RemoveGroupFromOptions**: Safely disables groups using enable flag instead of deletion\n\n#### Technical Improvements\n- **Schema Alignment**: Fixed critical JOIN queries to use correct field mappings (office_storage.name ‚Üí office_storage_options.value)\n- **Error Handling**: Enhanced error handling with proper exception management and user-friendly messages\n- **Code Safety**: All queries use parameterized SQL to prevent injection attacks\n\n### Latest GUI Enhancements (September 11, 2025)\n\n#### New DataGridView Features\n- **Type Column Display**: Added \"üè∑Ô∏è –¢–∏–ø\" column to show product types loaded from office_storage_options table\n- **Smart Notification System**: Implemented conditional notification button that appears only for products with `msg_send=true` AND `quantity<10`\n- **Excel Export Capability**: Added \"üìä –≠–∫—Å–ø–æ—Ä—Ç Excel\" button with CSV export functionality including all product fields\n\n#### Notification System Implementation\n- **Conditional Button Logic**: Notification buttons (üìß –£–≤–µ–¥–æ–º–∏—Ç—å) only visible for eligible products meeting both criteria\n- **Safe Click Handling**: Built-in validation prevents unauthorized notifications for ineligible products\n- **Custom Input Dialog**: Replaced external Microsoft.VisualBasic dependency with custom WinForms email input dialog\n- **Enhanced User Feedback**: Clear messages inform users about notification success/failure states\n\n#### Export Features\n- **CSV Format Support**: Full product data export in CSV format compatible with Excel\n- **Comprehensive Data**: Export includes all fields: ID, Name, Volume, Quantity, Status, Group, Type, CountInTotal, AdditionalInfo, MsgSend\n- **Safe Data Handling**: Proper CSV escaping for special characters and quotes\n- **User-Friendly Interface**: SaveFileDialog with timestamp-based default filenames\n\n#### Architecture Improvements\n- **Button Visibility Control**: Fixed UseColumnTextForButtonValue logic for proper per-cell button display\n- **Performance Optimization**: Efficient data loading prevents UI lag during rendering\n- **Security Enhancement**: All user inputs validated and sanitized before processing\n- **No External Dependencies**: Self-contained implementation without additional library requirements","size_bytes":7313},"DataAccess/DatabaseHelper.cs":{"content":"Ôªøusing System;\nusing System.Configuration;\nusing MySql.Data.MySqlClient;\nusing System.Windows.Forms;\n\nnamespace officeApp.DataAccess\n{\n    public static class DatabaseHelper\n    {\n        private static string connectionString;\n\n        static DatabaseHelper()\n        {\n            try\n            {\n                connectionString = ConfigurationManager.ConnectionStrings[\"OfficeDB\"].ConnectionString;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}\");\n                connectionString = string.Empty;\n            }\n        }\n\n        public static MySqlConnection GetConnection()\n        {\n            if (string.IsNullOrEmpty(connectionString))\n            {\n                throw new InvalidOperationException(\"–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\");\n            }\n\n            return new MySqlConnection(connectionString);\n        }\n\n        public static bool TestConnection()\n        {\n            try\n            {\n                using (var connection = GetConnection())\n                {\n                    connection.Open();\n\n                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞\n                    using (var command = new MySqlCommand(\"SELECT 1\", connection))\n                    {\n                        var result = command.ExecuteScalar();\n                        return result != null && result.ToString() == \"1\";\n                    }\n                }\n            }\n            catch (MySqlException mysqlEx)\n            {\n                ShowDetailedMySqlError(mysqlEx);\n                return false;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}\");\n                return false;\n            }\n        }\n\n        private static void ShowDetailedMySqlError(MySqlException mysqlEx)\n        {\n            string errorMessage = $\"–û—à–∏–±–∫–∞ MySQL:\\n\";\n            errorMessage += $\"\\n- –°–æ–æ–±—â–µ–Ω–∏–µ: {mysqlEx.Message}\";\n            errorMessage += $\"\\n- –ö–æ–¥ –æ—à–∏–±–∫–∏: {mysqlEx.Number}\";\n            errorMessage += $\"\\n---------------------------\";\n\n            MessageBox.Show(errorMessage, \"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }\n\n        public static string GetConnectionInfo()\n        {\n            try\n            {\n                var builder = new MySqlConnectionStringBuilder(connectionString);\n                return $\"–°–µ—Ä–≤–µ—Ä: {builder.Server}\\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {builder.Database}\\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {builder.UserID}\";\n            }\n            catch\n            {\n                return \"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\";\n            }\n        }\n\n        public static bool CheckUsersTableStructure()\n        {\n            try\n            {\n                using (var connection = GetConnection())\n                {\n                    connection.Open();\n\n                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users\n                    string checkTableQuery = \"SHOW TABLES LIKE 'users'\";\n                    MySqlCommand cmd = new MySqlCommand(checkTableQuery, connection);\n                    var tableExists = cmd.ExecuteScalar() != null;\n\n                    if (!tableExists)\n                    {\n                        MessageBox.Show(\"–¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\");\n                        return false;\n                    }\n\n                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤\n                    string checkColumnsQuery = @\"\n                SHOW COLUMNS FROM users \n                WHERE Field IN ('username', 'password')\";\n\n                    cmd = new MySqlCommand(checkColumnsQuery, connection);\n                    using (var reader = cmd.ExecuteReader())\n                    {\n                        int columnCount = 0;\n                        while (reader.Read()) columnCount++;\n\n                        if (columnCount < 2)\n                        {\n                            MessageBox.Show(\"–í —Ç–∞–±–ª–∏—Ü–µ 'users' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: username, password\");\n                            return false;\n                        }\n                    }\n\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {ex.Message}\");\n                return false;\n            }\n        }\n    }\n}","size_bytes":4782},"DataAccess/ProductRepository.cs":{"content":"Ôªøusing System;\nusing System.Collections.Generic;\nusing MySql.Data.MySqlClient;\nusing System.Windows.Forms;\nusing officeApp.Models;\n\nnamespace officeApp.DataAccess\n{\n    public static class ProductRepository\n    {\n        public static List<Product> GetAllProducts()\n        {\n            List<Product> products = new List<Product>();\n\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤\n                    string query = @\"SELECT os.id, os.name, os.volume, os.quantity, os.status, \n                           COALESCE(os.group_name, '') as group_name,\n                           COALESCE(os.count_in_total, 1) as count_in_total,\n                           COALESCE(os.additional_info, '') as additional_info,\n                           COALESCE(os.msg_send, 0) as msg_send,\n                           COALESCE(os.product_type, '') as product_type \n                           FROM office_storage os\n                           ORDER BY os.name\";\n\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n\n                    connection.Open();\n                    using (MySqlDataReader reader = cmd.ExecuteReader())\n                    {\n                        while (reader.Read())\n                        {\n                            products.Add(new Product\n                            {\n                                Id = reader.GetInt32(\"id\"),\n                                Name = reader.GetString(\"name\"),\n                                Volume = reader.GetString(\"volume\"),\n                                Quantity = reader.GetInt32(\"quantity\"),\n                                Status = reader.GetString(\"status\"),\n                                Group = reader.GetString(\"group_name\"), // –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å\n                                CountInTotal = reader.GetBoolean(\"count_in_total\"),\n                                AdditionalInfo = reader.GetString(\"additional_info\"),\n                                Type = reader.GetString(\"product_type\"),\n                                MsgSend = reader.GetBoolean(\"msg_send\")\n                            });\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ex.Message}\");\n            }\n\n            return products;\n        }\n\n        public static List<StorageOption> GetStorageOptions(string optionType)\n        {\n            List<StorageOption> options = new List<StorageOption>();\n\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ (enable = 1)\n                    string query = \"SELECT value FROM office_storage_options WHERE option_type = @OptionType AND `enable` = 1 ORDER BY value\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@OptionType\", optionType);\n\n                    connection.Open();\n                    using (MySqlDataReader reader = cmd.ExecuteReader())\n                    {\n                        while (reader.Read())\n                        {\n                            options.Add(new StorageOption\n                            {\n                                OptionType = optionType,\n                                Value = reader.GetString(\"value\")\n                            });\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ü–∏–π: {ex.Message}\");\n            }\n\n            return options;\n        }\n\n        public static bool UpdateProductQuantity(int productId, int newQuantity)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = \"UPDATE office_storage SET quantity = @Quantity WHERE id = @Id\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@Quantity\", newQuantity);\n                    cmd.Parameters.AddWithValue(\"@Id\", productId);\n\n                    connection.Open();\n                    int rowsAffected = cmd.ExecuteNonQuery();\n                    return rowsAffected > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {ex.Message}\");\n                return false;\n            }\n        }\n\n        public static bool AddProduct(Product product)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = @\"INSERT INTO office_storage (name, volume, quantity, status) \n                                    VALUES (@Name, @Volume, @Quantity, @Status)\";\n\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@Name\", product.Name);\n                    cmd.Parameters.AddWithValue(\"@Volume\", product.Volume);\n                    cmd.Parameters.AddWithValue(\"@Quantity\", product.Quantity);\n                    cmd.Parameters.AddWithValue(\"@Status\", product.Status);\n\n                    connection.Open();\n                    cmd.ExecuteNonQuery();\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}\");\n                return false;\n            }\n        }\n\n        public static bool UpdateProduct(Product product)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = @\"UPDATE office_storage SET \n                                    name = @Name, \n                                    volume = @Volume, \n                                    quantity = @Quantity, \n                                    status = @Status \n                                    WHERE id = @Id\";\n\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@Id\", product.Id);\n                    cmd.Parameters.AddWithValue(\"@Name\", product.Name);\n                    cmd.Parameters.AddWithValue(\"@Volume\", product.Volume);\n                    cmd.Parameters.AddWithValue(\"@Quantity\", product.Quantity);\n                    cmd.Parameters.AddWithValue(\"@Status\", product.Status);\n\n                    connection.Open();\n                    cmd.ExecuteNonQuery();\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}\");\n                return false;\n            }\n        }\n\n        public static bool DeleteProduct(int productId)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = \"DELETE FROM office_storage WHERE id = @Id\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@Id\", productId);\n\n                    connection.Open();\n                    cmd.ExecuteNonQuery();\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}\");\n                return false;\n            }\n        }\n\n        public static bool UpdateProductGroup(int productId, string groupName, bool countInTotal)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = \"UPDATE office_storage SET group_name = @GroupName, count_in_total = @CountInTotal WHERE id = @Id\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@GroupName\", groupName);\n                    cmd.Parameters.AddWithValue(\"@CountInTotal\", countInTotal);\n                    cmd.Parameters.AddWithValue(\"@Id\", productId);\n\n                    connection.Open();\n                    cmd.ExecuteNonQuery();\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {ex.Message}\");\n                return false;\n            }\n        }\n\n        public static List<Product> GetProductsByGroup(string groupName)\n        {\n            List<Product> products = new List<Product>();\n\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = @\"SELECT os.*, \n                                    COALESCE(opt.value, '') as product_type\n                                    FROM office_storage os\n                                    LEFT JOIN office_storage_options opt ON os.name = opt.value \n                                    AND opt.option_type = 'type' AND opt.enable = 1\n                                    WHERE os.group_name = @GroupName ORDER BY os.name\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@GroupName\", groupName);\n\n                    connection.Open();\n                    using (MySqlDataReader reader = cmd.ExecuteReader())\n                    {\n                        while (reader.Read())\n                        {\n                            products.Add(new Product\n                            {\n                                Id = reader.GetInt32(\"id\"),\n                                Name = reader.GetString(\"name\"),\n                                Volume = reader.GetString(\"volume\"),\n                                Quantity = reader.GetInt32(\"quantity\"),\n                                Status = reader.GetString(\"status\"),\n                                Group = reader.IsDBNull(reader.GetOrdinal(\"group_name\")) ? \"\" : reader.GetString(\"group_name\"),\n                                CountInTotal = reader.IsDBNull(reader.GetOrdinal(\"count_in_total\")) ? true : reader.GetBoolean(\"count_in_total\"),\n                                AdditionalInfo = reader.IsDBNull(reader.GetOrdinal(\"additional_info\")) ? \"\" : reader.GetString(\"additional_info\"),\n                                Type = reader.IsDBNull(reader.GetOrdinal(\"product_type\")) ? \"\" : reader.GetString(\"product_type\"),\n                                MsgSend = reader.IsDBNull(reader.GetOrdinal(\"msg_send\")) ? false : reader.GetBoolean(\"msg_send\")\n                            });\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥—Ä—É–ø–ø—ã: {ex.Message}\");\n            }\n\n            return products;\n        }\n\n        public static List<string> GetProductGroups()\n        {\n            List<string> groups = new List<string>();\n\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ office_storage_options —Å —Ñ–∏–ª—å—Ç—Ä–æ–º enable=1\n                    string query = \"SELECT value FROM office_storage_options WHERE option_type = 'group' AND `enable` = 1 ORDER BY value\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n\n                    connection.Open();\n                    using (MySqlDataReader reader = cmd.ExecuteReader())\n                    {\n                        while (reader.Read())\n                        {\n                            groups.Add(reader.GetString(\"value\"));\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø: {ex.Message}\");\n            }\n\n            return groups;\n        }\n\n        public static string GetProductType(int productId)\n        {\n            string productType = \"\";\n\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = @\"SELECT COALESCE(opt.value, '') as product_type \n                                   FROM office_storage os \n                                   LEFT JOIN office_storage_options opt ON os.name = opt.value \n                                   WHERE os.id = @ProductId \n                                   AND (opt.option_type = 'type' AND opt.enable = 1 OR opt.option_type IS NULL)\";\n                    \n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@ProductId\", productId);\n\n                    connection.Open();\n                    var result = cmd.ExecuteScalar();\n                    if (result != null)\n                    {\n                        productType = result.ToString();\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {ex.Message}\");\n            }\n\n            return productType;\n        }\n\n        public static bool IsProductTypeObraz(int productId)\n        {\n            string productType = GetProductType(productId);\n            return productType.Equals(\"–û–±—Ä–∞–∑\", StringComparison.OrdinalIgnoreCase);\n        }\n\n        public static bool AddGroupToOptions(string groupName)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞\n                    string checkQuery = \"SELECT COUNT(*) FROM office_storage_options WHERE option_type = 'group' AND value = @GroupName\";\n                    MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection);\n                    checkCmd.Parameters.AddWithValue(\"@GroupName\", groupName);\n\n                    connection.Open();\n                    int exists = Convert.ToInt32(checkCmd.ExecuteScalar());\n\n                    if (exists > 0)\n                    {\n                        // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë\n                        string updateQuery = \"UPDATE office_storage_options SET `enable` = 1 WHERE option_type = 'group' AND value = @GroupName\";\n                        MySqlCommand updateCmd = new MySqlCommand(updateQuery, connection);\n                        updateCmd.Parameters.AddWithValue(\"@GroupName\", groupName);\n                        updateCmd.ExecuteNonQuery();\n                    }\n                    else\n                    {\n                        // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é\n                        string insertQuery = \"INSERT INTO office_storage_options (option_type, value, `enable`) VALUES ('group', @GroupName, 1)\";\n                        MySqlCommand insertCmd = new MySqlCommand(insertQuery, connection);\n                        insertCmd.Parameters.AddWithValue(\"@GroupName\", groupName);\n                        insertCmd.ExecuteNonQuery();\n                    }\n\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {ex.Message}\");\n                return false;\n            }\n        }\n\n        public static bool RemoveGroupFromOptions(string groupName)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = \"UPDATE office_storage_options SET `enable` = 0 WHERE option_type = 'group' AND value = @GroupName\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@GroupName\", groupName);\n\n                    connection.Open();\n                    int rowsAffected = cmd.ExecuteNonQuery();\n                    return rowsAffected > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {ex.Message}\");\n                return false;\n            }\n        }\n\n        // –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø–ú–ò\n        \n        /// <summary>\n        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n        /// </summary>\n        public static string GetAppVersionFromDatabase()\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = \"SELECT setting_value FROM office_app_settings WHERE setting_key = 'app_version' LIMIT 1\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n\n                    connection.Open();\n                    var result = cmd.ExecuteScalar();\n                    return result?.ToString() ?? \"1.0.0.0\";\n                }\n            }\n            catch (Exception)\n            {\n                // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n                return \"1.0.0.0\";\n            }\n        }\n\n        /// <summary>\n        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n        /// </summary>\n        public static bool UpdateAppVersionInDatabase(string newVersion)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = @\"INSERT INTO office_app_settings (setting_key, setting_value) \n                                   VALUES ('app_version', @Version) \n                                   ON DUPLICATE KEY UPDATE setting_value = @Version\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@Version\", newVersion);\n\n                    connection.Open();\n                    cmd.ExecuteNonQuery();\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏: {ex.Message}\");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ AssemblyInfo\n        /// </summary>\n        public static string GetCurrentAppVersion()\n        {\n            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? \"1.0.0.0\";\n        }\n\n        // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ò–ü–û–í –í –°–ö–õ–ê–î–ï\n\n        /// <summary>\n        /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∫–ª–∞–¥–µ\n        /// </summary>\n        public static List<StorageOption> GetEditableStorageTypes()\n        {\n            List<StorageOption> types = new List<StorageOption>();\n\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = \"SELECT value FROM office_storage_options WHERE option_type = 'type' AND `enable` = 1 ORDER BY value\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n\n                    connection.Open();\n                    using (MySqlDataReader reader = cmd.ExecuteReader())\n                    {\n                        while (reader.Read())\n                        {\n                            types.Add(new StorageOption\n                            {\n                                OptionType = \"type\",\n                                Value = reader.GetString(\"value\")\n                            });\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤: {ex.Message}\");\n            }\n\n            return types;\n        }\n\n        /// <summary>\n        /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø –≤ —Å–∏—Å—Ç–µ–º—É\n        /// </summary>\n        public static bool AddStorageType(string typeName)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–∏–ø\n                    string checkQuery = \"SELECT COUNT(*) FROM office_storage_options WHERE option_type = 'type' AND value = @TypeName\";\n                    MySqlCommand checkCmd = new MySqlCommand(checkQuery, connection);\n                    checkCmd.Parameters.AddWithValue(\"@TypeName\", typeName);\n\n                    connection.Open();\n                    int count = Convert.ToInt32(checkCmd.ExecuteScalar());\n\n                    if (count > 0)\n                    {\n                        MessageBox.Show(\"–¢–∏–ø —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\");\n                        return false;\n                    }\n\n                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø\n                    string insertQuery = \"INSERT INTO office_storage_options (option_type, value, `enable`) VALUES ('type', @TypeName, 1)\";\n                    MySqlCommand insertCmd = new MySqlCommand(insertQuery, connection);\n                    insertCmd.Parameters.AddWithValue(\"@TypeName\", typeName);\n\n                    int rowsAffected = insertCmd.ExecuteNonQuery();\n                    return rowsAffected > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞: {ex.Message}\");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// –ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞\n        /// </summary>\n        public static bool UpdateStorageType(string oldTypeName, string newTypeName)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    connection.Open();\n                    using (var transaction = connection.BeginTransaction())\n                    {\n                        try\n                        {\n                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –æ–ø—Ü–∏–π\n                            string updateOptionsQuery = \"UPDATE office_storage_options SET value = @NewTypeName WHERE option_type = 'type' AND value = @OldTypeName\";\n                            MySqlCommand updateOptionsCmd = new MySqlCommand(updateOptionsQuery, connection, transaction);\n                            updateOptionsCmd.Parameters.AddWithValue(\"@NewTypeName\", newTypeName);\n                            updateOptionsCmd.Parameters.AddWithValue(\"@OldTypeName\", oldTypeName);\n                            updateOptionsCmd.ExecuteNonQuery();\n\n                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ—Ç —Ç–∏–ø\n                            string updateProductsQuery = \"UPDATE office_storage SET product_type = @NewTypeName WHERE product_type = @OldTypeName\";\n                            MySqlCommand updateProductsCmd = new MySqlCommand(updateProductsQuery, connection, transaction);\n                            updateProductsCmd.Parameters.AddWithValue(\"@NewTypeName\", newTypeName);\n                            updateProductsCmd.Parameters.AddWithValue(\"@OldTypeName\", oldTypeName);\n                            updateProductsCmd.ExecuteNonQuery();\n\n                            transaction.Commit();\n                            return true;\n                        }\n                        catch (Exception)\n                        {\n                            transaction.Rollback();\n                            throw;\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞: {ex.Message}\");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// –£–¥–∞–ª—è–µ—Ç —Ç–∏–ø (–¥–µ–ª–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)\n        /// </summary>\n        public static bool RemoveStorageType(string typeName)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    connection.Open();\n                    using (var transaction = connection.BeginTransaction())\n                    {\n                        try\n                        {\n                            // –£–¥–∞–ª—è–µ–º —Ç–∏–ø –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞\n                            string disableTypeQuery = \"UPDATE office_storage_options SET `enable` = 0 WHERE option_type = 'type' AND value = @TypeName\";\n                            MySqlCommand disableTypeCmd = new MySqlCommand(disableTypeQuery, connection, transaction);\n                            disableTypeCmd.Parameters.AddWithValue(\"@TypeName\", typeName);\n                            disableTypeCmd.ExecuteNonQuery();\n\n                            // –û—á–∏—â–∞–µ–º —Ç–∏–ø —É —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n                            string clearProductTypesQuery = \"UPDATE office_storage SET product_type = '' WHERE product_type = @TypeName\";\n                            MySqlCommand clearProductTypesCmd = new MySqlCommand(clearProductTypesQuery, connection, transaction);\n                            clearProductTypesCmd.Parameters.AddWithValue(\"@TypeName\", typeName);\n                            clearProductTypesCmd.ExecuteNonQuery();\n\n                            transaction.Commit();\n                            return true;\n                        }\n                        catch (Exception)\n                        {\n                            transaction.Rollback();\n                            throw;\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞: {ex.Message}\");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–∏–ø —Ç–æ–≤–∞—Ä—É\n        /// </summary>\n        public static bool AssignTypeToProduct(int productId, string typeName)\n        {\n            try\n            {\n                using (var connection = DatabaseHelper.GetConnection())\n                {\n                    string query = \"UPDATE office_storage SET product_type = @TypeName WHERE id = @ProductId\";\n                    MySqlCommand cmd = new MySqlCommand(query, connection);\n                    cmd.Parameters.AddWithValue(\"@TypeName\", typeName);\n                    cmd.Parameters.AddWithValue(\"@ProductId\", productId);\n\n                    connection.Open();\n                    int rowsAffected = cmd.ExecuteNonQuery();\n                    return rowsAffected > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä—É: {ex.Message}\");\n                return false;\n            }\n        }\n    }\n}\n","size_bytes":28533},"DataAccess/UserRepository.cs":{"content":"Ôªøusing MySql.Data.MySqlClient;\nusing officeApp.Models;\nusing System;\nusing System.Windows.Forms;\n\nnamespace officeApp.DataAccess\n{\n    public static class UserRepository\n    {\n        public static string GetPassword(string username)\n        {\n            using (var connection = DatabaseHelper.GetConnection())\n            {\n                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ password\n                string query = \"SELECT password FROM users WHERE username = @Username\";\n                MySqlCommand cmd = new MySqlCommand(query, connection);\n                cmd.Parameters.AddWithValue(\"@Username\", username);\n\n                try\n                {\n                    connection.Open();\n                    var result = cmd.ExecuteScalar();\n                    return result?.ToString();\n                }\n                catch (MySqlException ex)\n                {\n                    System.Diagnostics.Debug.WriteLine($\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {ex.Message}\");\n                    return null;\n                }\n            }\n        }\n\n        public static User GetUserByUsername(string username)\n        {\n            using (var connection = DatabaseHelper.GetConnection())\n            {\n                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –≤–∞—à–µ–π –ë–î\n                string query = @\"SELECT \n                    username, \n                    role, \n                    first_name, \n                    middle_name, \n                    last_name, \n                    email \n                FROM users WHERE username = @Username\";\n\n                MySqlCommand cmd = new MySqlCommand(query, connection);\n                cmd.Parameters.AddWithValue(\"@Username\", username);\n\n                try\n                {\n                    connection.Open();\n                    using (MySqlDataReader reader = cmd.ExecuteReader())\n                    {\n                        if (reader.Read())\n                        {\n                            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n                            string firstName = reader.IsDBNull(reader.GetOrdinal(\"first_name\")) ? \"\" : reader.GetString(\"first_name\");\n                            string middleName = reader.IsDBNull(reader.GetOrdinal(\"middle_name\")) ? \"\" : reader.GetString(\"middle_name\");\n                            string lastName = reader.IsDBNull(reader.GetOrdinal(\"last_name\")) ? \"\" : reader.GetString(\"last_name\");\n\n                            string fullName = $\"{lastName} {firstName} {middleName}\".Trim();\n\n                            return new User\n                            {\n                                Username = reader.GetString(\"username\"),\n                                Role = reader.IsDBNull(reader.GetOrdinal(\"role\")) ? \"User\" : reader.GetString(\"role\"),\n                                Email = reader.IsDBNull(reader.GetOrdinal(\"email\")) ? \"\" : reader.GetString(\"email\"),\n                                FullName = fullName\n                            };\n                        }\n                        else\n                        {\n                            MessageBox.Show(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\", \"–û—à–∏–±–∫–∞\",\n                                MessageBoxButtons.OK, MessageBoxIcon.Error);\n                        }\n                    }\n                }\n                catch (MySqlException ex)\n                {\n                    MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}\\n\\n\" +\n                                  $\"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users\", \"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\",\n                                  MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    System.Diagnostics.Debug.WriteLine($\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}\");\n                }\n            }\n            return null;\n        }\n\n        public static bool UserExists(string username)\n        {\n            using (var connection = DatabaseHelper.GetConnection())\n            {\n                string query = \"SELECT COUNT(*) FROM users WHERE username = @Username\";\n                MySqlCommand cmd = new MySqlCommand(query, connection);\n                cmd.Parameters.AddWithValue(\"@Username\", username);\n\n                try\n                {\n                    connection.Open();\n                    long count = (long)cmd.ExecuteScalar();\n                    return count > 0;\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}\");\n                    return false;\n                }\n            }\n        }\n\n        public static void UpdateLastLogin(string username)\n        {\n            using (var connection = DatabaseHelper.GetConnection())\n            {\n                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞\n                string query = \"UPDATE users SET last_login = NOW() WHERE username = @Username\";\n                MySqlCommand cmd = new MySqlCommand(query, connection);\n                cmd.Parameters.AddWithValue(\"@Username\", username);\n\n                try\n                {\n                    connection.Open();\n                    cmd.ExecuteNonQuery();\n                }\n                catch (MySqlException ex)\n                {\n                    System.Diagnostics.Debug.WriteLine($\"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞: {ex.Message}\");\n                }\n            }\n        }\n\n        // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã users\n        public static void CheckTableStructure()\n        {\n            using (var connection = DatabaseHelper.GetConnection())\n            {\n                string query = \"DESCRIBE users\";\n                MySqlCommand cmd = new MySqlCommand(query, connection);\n\n                try\n                {\n                    connection.Open();\n                    using (MySqlDataReader reader = cmd.ExecuteReader())\n                    {\n                        string columns = \"–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã users:\\n\";\n                        while (reader.Read())\n                        {\n                            columns += $\"- {reader.GetString(0)} ({reader.GetString(1)})\\n\";\n                        }\n                        MessageBox.Show(columns, \"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {ex.Message}\");\n                }\n            }\n        }\n    }\n}","size_bytes":6936},"Forms/GroupManagementForm.cs":{"content":"Ôªøusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing officeApp.DataAccess;\nusing officeApp.Models;\n\nnamespace officeApp.Forms\n{\n    public partial class GroupManagementForm : Form\n    {\n        private Product _selectedProduct;\n        private List<Product> _groupProducts;\n        private ComboBox cmbGroups;\n        private CheckBox chkCountTogether;\n        private ListBox lstGroupProducts;\n\n        public GroupManagementForm(Product product)\n        {\n            _selectedProduct = product;\n            InitializeComponent();\n            LoadGroups();\n            LoadGroupProducts();\n        }\n\n        private void InitializeComponent()\n        {\n            this.Size = new Size(500, 400);\n            this.Text = \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π\";\n            this.FormBorderStyle = FormBorderStyle.FixedDialog;\n            this.StartPosition = FormStartPosition.CenterParent;\n            this.Font = new Font(\"Segoe UI\", 9);\n\n            // –ì—Ä—É–ø–ø–∞\n            Label lblGroup = new Label()\n            {\n                Text = \"–ì—Ä—É–ø–ø–∞:\",\n                Location = new Point(20, 20),\n                Width = 100\n            };\n\n            cmbGroups = new ComboBox()\n            {\n                Location = new Point(120, 20),\n                Width = 200,\n                DropDownStyle = ComboBoxStyle.DropDownList\n            };\n\n            Button btnCreateGroup = new Button()\n            {\n                Text = \"–°–æ–∑–¥–∞—Ç—å\",\n                Location = new Point(330, 20),\n                Size = new Size(80, 23)\n            };\n\n            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã\n            chkCountTogether = new CheckBox()\n            {\n                Text = \"–°—á–∏—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø—ã –≤–º–µ—Å—Ç–µ\",\n                Location = new Point(20, 60),\n                Width = 200,\n                Checked = true\n            };\n\n            // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ\n            Label lblProducts = new Label()\n            {\n                Text = \"–¢–æ–≤–∞—Ä—ã –≤ –≥—Ä—É–ø–ø–µ:\",\n                Location = new Point(20, 100),\n                Width = 150\n            };\n\n            lstGroupProducts = new ListBox()\n            {\n                Location = new Point(20, 130),\n                Size = new Size(400, 150)\n            };\n\n            // –ö–Ω–æ–ø–∫–∏\n            Button btnAddToGroup = new Button()\n            {\n                Text = \"–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É\",\n                Location = new Point(20, 300),\n                Size = new Size(120, 30)\n            };\n\n            Button btnRemoveFromGroup = new Button()\n            {\n                Text = \"–£–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã\",\n                Location = new Point(150, 300),\n                Size = new Size(120, 30)\n            };\n\n            Button btnSave = new Button()\n            {\n                Text = \"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å\",\n                Location = new Point(300, 300),\n                Size = new Size(80, 30)\n            };\n\n            Button btnCancel = new Button()\n            {\n                Text = \"–û—Ç–º–µ–Ω–∞\",\n                Location = new Point(390, 300),\n                Size = new Size(80, 30)\n            };\n\n            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π\n            btnCreateGroup.Click += BtnCreateGroup_Click;\n            btnAddToGroup.Click += BtnAddToGroup_Click;\n            btnRemoveFromGroup.Click += BtnRemoveFromGroup_Click;\n            btnSave.Click += BtnSave_Click;\n            btnCancel.Click += BtnCancel_Click;\n            cmbGroups.SelectedIndexChanged += CmbGroups_SelectedIndexChanged;\n\n            this.Controls.AddRange(new Control[] {\n                lblGroup, cmbGroups, btnCreateGroup, chkCountTogether,\n                lblProducts, lstGroupProducts, btnAddToGroup, btnRemoveFromGroup,\n                btnSave, btnCancel\n            });\n        }\n\n        private void BtnCreateGroup_Click(object sender, EventArgs e)\n        {\n            // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã\n            using (var inputForm = new Form())\n            {\n                inputForm.Text = \"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\";\n                inputForm.Size = new Size(300, 150);\n                inputForm.FormBorderStyle = FormBorderStyle.FixedDialog;\n                inputForm.StartPosition = FormStartPosition.CenterParent;\n\n                Label lbl = new Label() { Text = \"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\", Location = new Point(20, 20), Width = 200 };\n                TextBox txt = new TextBox() { Location = new Point(20, 50), Width = 200 };\n                Button btnOk = new Button() { Text = \"OK\", Location = new Point(20, 80), DialogResult = DialogResult.OK };\n                Button btnCancel = new Button() { Text = \"–û—Ç–º–µ–Ω–∞\", Location = new Point(120, 80), DialogResult = DialogResult.Cancel };\n\n                inputForm.Controls.AddRange(new Control[] { lbl, txt, btnOk, btnCancel });\n                inputForm.AcceptButton = btnOk;\n                inputForm.CancelButton = btnCancel;\n\n                if (inputForm.ShowDialog() == DialogResult.OK && !string.IsNullOrEmpty(txt.Text))\n                {\n                    cmbGroups.Items.Add(txt.Text);\n                    cmbGroups.SelectedItem = txt.Text;\n                }\n            }\n        }\n\n        private void BtnAddToGroup_Click(object sender, EventArgs e)\n        {\n            if (cmbGroups.SelectedItem != null)\n            {\n                string groupName = cmbGroups.SelectedItem.ToString();\n                if (ProductRepository.UpdateProductGroup(_selectedProduct.Id, groupName, chkCountTogether.Checked))\n                {\n                    _selectedProduct.Group = groupName;\n                    _selectedProduct.CountInTotal = chkCountTogether.Checked;\n                    LoadGroupProducts(groupName);\n                    MessageBox.Show(\"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\", \"–£—Å–ø–µ—Ö\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É\", \"–û—à–∏–±–∫–∞\", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n            }\n        }\n\n        private void BtnRemoveFromGroup_Click(object sender, EventArgs e)\n        {\n            if (lstGroupProducts.SelectedIndex >= 0 && _groupProducts != null && lstGroupProducts.SelectedIndex < _groupProducts.Count)\n            {\n                Product selectedProduct = _groupProducts[lstGroupProducts.SelectedIndex];\n                if (MessageBox.Show($\"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{selectedProduct.Name}' –∏–∑ –≥—Ä—É–ø–ø—ã?\", \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\",\n                    MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)\n                {\n                    if (ProductRepository.UpdateProductGroup(selectedProduct.Id, \"\", true))\n                    {\n                        LoadGroupProducts(cmbGroups.SelectedItem?.ToString());\n                    }\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã\", \"–û—à–∏–±–∫–∞\", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n            }\n        }\n\n        private void BtnSave_Click(object sender, EventArgs e)\n        {\n            this.DialogResult = DialogResult.OK;\n            this.Close();\n        }\n\n        private void BtnCancel_Click(object sender, EventArgs e)\n        {\n            this.DialogResult = DialogResult.Cancel;\n            this.Close();\n        }\n\n        private void CmbGroups_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (cmbGroups.SelectedItem != null)\n            {\n                LoadGroupProducts(cmbGroups.SelectedItem.ToString());\n            }\n        }\n\n        private void LoadGroups()\n        {\n            cmbGroups.Items.Clear();\n\n            List<string> groups = ProductRepository.GetProductGroups();\n            foreach (string group in groups)\n            {\n                cmbGroups.Items.Add(group);\n            }\n\n            // –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n            if (!string.IsNullOrEmpty(_selectedProduct.Group) && cmbGroups.Items.Contains(_selectedProduct.Group))\n            {\n                cmbGroups.SelectedItem = _selectedProduct.Group;\n            }\n            else if (cmbGroups.Items.Count > 0)\n            {\n                cmbGroups.SelectedIndex = 0;\n            }\n        }\n\n        private void LoadGroupProducts(string groupName = null)\n        {\n            groupName = groupName ?? _selectedProduct.Group;\n            if (string.IsNullOrEmpty(groupName)) return;\n\n            lstGroupProducts.Items.Clear();\n\n            _groupProducts = ProductRepository.GetProductsByGroup(groupName);\n            foreach (Product product in _groupProducts)\n            {\n                lstGroupProducts.Items.Add($\"{product.Name} ({product.Volume}) - {product.Quantity} —à—Ç. {(product.CountInTotal ? \"\" : \"[–Ω–µ —Å—á–∏—Ç–∞—Ç—å]\")}\");\n            }\n\n            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã\n            if (_groupProducts.Count > 0)\n            {\n                chkCountTogether.Checked = _groupProducts[0].CountInTotal;\n            }\n        }\n    }\n}","size_bytes":9390},"Forms/LoginForm.Designer.cs":{"content":"Ôªøusing System.Windows.Forms;\n\nnamespace officeApp.Forms\n{\n    partial class LoginForm\n    {\n        private System.ComponentModel.IContainer components = null;\n        private TextBox txtUsername;\n        private TextBox txtPassword;\n        private Button btnLogin;\n        private Label lblUsername;\n        private Label lblPassword;\n        private PictureBox pictureBox1;\n        private Label lblTitle;\n        \n        //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n        private Button btnDebug;\n        //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        private void InitializeComponent()\n        {\n            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoginForm));\n            this.txtUsername = new System.Windows.Forms.TextBox();\n            this.txtPassword = new System.Windows.Forms.TextBox();\n            this.btnLogin = new System.Windows.Forms.Button();\n            this.lblUsername = new System.Windows.Forms.Label();\n            this.lblPassword = new System.Windows.Forms.Label();\n            this.pictureBox1 = new System.Windows.Forms.PictureBox();\n            this.lblTitle = new System.Windows.Forms.Label();\n            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();\n            this.SuspendLayout();\n\n            //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n            this.btnDebug = new System.Windows.Forms.Button();\n            this.btnDebug.Location = new System.Drawing.Point(350, 10);\n            this.btnDebug.Name = \"btnDebug\";\n            this.btnDebug.Size = new System.Drawing.Size(80, 25);\n            this.btnDebug.TabIndex = 7;\n            this.btnDebug.Text = \"Debug\";\n            this.btnDebug.Font = new System.Drawing.Font(\"Segoe UI\", 8F);\n            this.btnDebug.BackColor = System.Drawing.Color.LightGray;\n            this.btnDebug.Click += new System.EventHandler(this.btnDebug_Click);\n            //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n\n            // txtUsername\n            this.txtUsername.Location = new System.Drawing.Point(120, 150);\n            this.txtUsername.Name = \"txtUsername\";\n            this.txtUsername.Size = new System.Drawing.Size(200, 25);\n            this.txtUsername.TabIndex = 0;\n            this.txtUsername.Font = new System.Drawing.Font(\"Segoe UI\", 10F);\n\n            // txtPassword\n            this.txtPassword.Location = new System.Drawing.Point(120, 200);\n            this.txtPassword.Name = \"txtPassword\";\n            this.txtPassword.PasswordChar = '*';\n            this.txtPassword.Size = new System.Drawing.Size(200, 25);\n            this.txtPassword.TabIndex = 1;\n            this.txtPassword.Font = new System.Drawing.Font(\"Segoe UI\", 10F);\n\n            // btnLogin\n            this.btnLogin.Location = new System.Drawing.Point(150, 250);\n            this.btnLogin.Name = \"btnLogin\";\n            this.btnLogin.Size = new System.Drawing.Size(120, 35);\n            this.btnLogin.TabIndex = 2;\n            this.btnLogin.Text = \"OK\";\n            this.btnLogin.Font = new System.Drawing.Font(\"Segoe UI\", 10F, System.Drawing.FontStyle.Bold);\n            this.btnLogin.BackColor = System.Drawing.Color.SteelBlue;\n            this.btnLogin.ForeColor = System.Drawing.Color.White;\n            this.btnLogin.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n            this.btnLogin.Click += new System.EventHandler(this.btnLogin_Click);\n\n            // lblUsername\n            this.lblUsername.AutoSize = true;\n            this.lblUsername.Location = new System.Drawing.Point(120, 130);\n            this.lblUsername.Name = \"lblUsername\";\n            this.lblUsername.Size = new System.Drawing.Size(120, 17);\n            this.lblUsername.TabIndex = 3;\n            this.lblUsername.Text = \"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\";\n            this.lblUsername.Font = new System.Drawing.Font(\"Segoe UI\", 9F);\n\n            // lblPassword\n            this.lblPassword.AutoSize = true;\n            this.lblPassword.Location = new System.Drawing.Point(120, 180);\n            this.lblPassword.Name = \"lblPassword\";\n            this.lblPassword.Size = new System.Drawing.Size(55, 17);\n            this.lblPassword.TabIndex = 4;\n            this.lblPassword.Text = \"–ü–∞—Ä–æ–ª—å:\";\n            this.lblPassword.Font = new System.Drawing.Font(\"Segoe UI\", 9F);\n\n            // pictureBox1\n            this.pictureBox1.Image = ((System.Drawing.Image)(resources.GetObject(\"pictureBox1.Image\")));\n            this.pictureBox1.Location = new System.Drawing.Point(150, 30);\n            this.pictureBox1.Name = \"pictureBox1\";\n            this.pictureBox1.Size = new System.Drawing.Size(120, 80);\n            this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;\n            this.pictureBox1.TabIndex = 5;\n            this.pictureBox1.TabStop = false;\n\n            // lblTitle\n            this.lblTitle.AutoSize = true;\n            this.lblTitle.Font = new System.Drawing.Font(\"Segoe UI\", 14F, System.Drawing.FontStyle.Bold);\n            this.lblTitle.Location = new System.Drawing.Point(110, 110);\n            this.lblTitle.Name = \"lblTitle\";\n            this.lblTitle.Size = new System.Drawing.Size(220, 25);\n            this.lblTitle.TabIndex = 6;\n            this.lblTitle.Text = \"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\";\n\n            // LoginForm\n            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 17F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.BackColor = System.Drawing.Color.White;\n            this.ClientSize = new System.Drawing.Size(440, 320);\n            this.Controls.Add(this.lblTitle);\n            this.Controls.Add(this.pictureBox1);\n            this.Controls.Add(this.lblPassword);\n            this.Controls.Add(this.lblUsername);\n            this.Controls.Add(this.btnLogin);\n            this.Controls.Add(this.txtPassword);\n            this.Controls.Add(this.txtUsername);\n            //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n            this.Controls.Add(this.btnDebug);\n            //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n            this.Font = new System.Drawing.Font(\"Segoe UI\", 9.75F);\n            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;\n            this.Icon = ((System.Drawing.Icon)(resources.GetObject(\"$this.Icon\")));\n            this.MaximizeBox = false;\n            this.MinimizeBox = false;\n            this.Name = \"LoginForm\";\n            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;\n            this.Text = \"–û—Ñ–∏—Å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –í—Ö–æ–¥\";\n            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();\n            this.ResumeLayout(false);\n            this.PerformLayout();\n        }\n    }\n}","size_bytes":6925},"Forms/LoginForm.cs":{"content":"Ôªøusing System;\nusing System.Windows.Forms;\nusing officeApp.DataAccess;\nusing officeApp.Models;\nusing officeApp.Utilities;\n\nnamespace officeApp.Forms\n{\n    public partial class LoginForm : Form\n    {\n        public LoginForm()\n        {\n            InitializeComponent();\n            this.AcceptButton = btnLogin; // Enter –¥–ª—è –≤—Ö–æ–¥–∞\n        }\n\n        private void CheckDatabaseStructure()\n        {\n            try\n            {\n                UserRepository.CheckTableStructure();\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {ex.Message}\");\n            }\n        }\n\n        //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n        private void btnDebug_Click(object sender, EventArgs e)\n        {\n            CheckDatabaseStructure();\n        }\n        //–ö–Ω–æ–ø–∫–∞ –¥–µ–±–∞–≥–∞\n\n        private void btnLogin_Click(object sender, EventArgs e)\n        {\n            string username = txtUsername.Text.Trim();\n            string password = txtPassword.Text;\n\n            if (string.IsNullOrEmpty(username))\n            {\n                MessageBox.Show(\"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                txtUsername.Focus();\n                return;\n            }\n\n            if (string.IsNullOrEmpty(password))\n            {\n                MessageBox.Show(\"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                txtPassword.Focus();\n                return;\n            }\n\n            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏\n            btnLogin.Enabled = false;\n            btnLogin.Text = \"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...\";\n\n            try\n            {\n                if (AuthenticateUser(username, password))\n                {\n                    User currentUser = UserRepository.GetUserByUsername(username);\n                    if (currentUser != null)\n                    {\n                        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞\n                        UserRepository.UpdateLastLogin(currentUser.Username);\n\n                        MainForm mainForm = new MainForm(currentUser);\n                        mainForm.Show();\n                        this.Hide();\n                    }\n                    else\n                    {\n                        MessageBox.Show(\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\", \"–û—à–∏–±–∫–∞\",\n                            MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    }\n                }\n                else\n                {\n                    MessageBox.Show(\"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å\", \"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\",\n                        MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    txtPassword.SelectAll();\n                    txtPassword.Focus();\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {ex.Message}\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n            finally\n            {\n                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É\n                btnLogin.Enabled = true;\n                btnLogin.Text = \"OK\";\n            }\n        }\n\n        private bool AuthenticateUser(string username, string password)\n        {\n            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ)\n            string storedPassword = UserRepository.GetPassword(username);\n\n            if (!string.IsNullOrEmpty(storedPassword))\n            {\n                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –±–µ–∑ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n                return PasswordHasher.VerifyPassword(password, storedPassword);\n            }\n\n            return false;\n        }\n\n        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞\n        private void txtUsername_KeyDown(object sender, KeyEventArgs e)\n        {\n            if (e.KeyCode == Keys.Enter)\n            {\n                txtPassword.Focus();\n                e.Handled = e.SuppressKeyPress = true;\n            }\n        }\n\n        private void txtPassword_KeyDown(object sender, KeyEventArgs e)\n        {\n            if (e.KeyCode == Keys.Enter)\n            {\n                btnLogin.PerformClick();\n                e.Handled = e.SuppressKeyPress = true;\n            }\n        }\n    }\n}","size_bytes":4680},"Forms/MainForm.cs":{"content":"Ôªøusing System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing officeApp.Models;\nusing officeApp.Modules;\n\nnamespace officeApp.Forms\n{\n    public partial class MainForm : Form\n    {\n        private User currentUser;\n        private TabControl tabControlMain;\n\n        public MainForm(User user)\n        {\n            currentUser = user;\n            InitializeComponent();\n            InitializeModules();\n            UpdateUserInterface();\n        }\n\n        private void InitializeComponent()\n        {\n            // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã\n            this.Text = $\"–û—Ñ–∏—Å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {currentUser.FullName})\";\n            this.Size = new Size(1024, 768);\n            this.StartPosition = FormStartPosition.CenterScreen;\n            this.WindowState = FormWindowState.Maximized;\n\n            // TabControl\n            tabControlMain = new TabControl();\n            tabControlMain.Dock = DockStyle.Fill;\n            tabControlMain.Appearance = TabAppearance.FlatButtons;\n            tabControlMain.ItemSize = new Size(100, 30);\n            tabControlMain.SizeMode = TabSizeMode.Fixed;\n\n            // StatusStrip\n            var statusStrip = new StatusStrip();\n            statusStrip.Dock = DockStyle.Bottom;\n\n            var lblWelcome = new ToolStripStatusLabel();\n            lblWelcome.Spring = true;\n            lblWelcome.TextAlign = ContentAlignment.MiddleLeft;\n\n            var lblRole = new ToolStripStatusLabel();\n            lblRole.Spring = true;\n            lblRole.TextAlign = ContentAlignment.MiddleRight;\n\n            statusStrip.Items.AddRange(new ToolStripItem[] { lblWelcome, lblRole });\n\n            // MenuStrip\n            var menuStrip = new MenuStrip();\n            menuStrip.Dock = DockStyle.Top;\n\n            var fileMenu = new ToolStripMenuItem(\"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\");\n            var exitItem = new ToolStripMenuItem(\"–í—ã—Ö–æ–¥\");\n            exitItem.Click += (s, e) => Application.Exit();\n\n            var helpMenu = new ToolStripMenuItem(\"–ü–æ–º–æ—â—å\");\n            var infoItem = new ToolStripMenuItem(\"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\");\n\n            var serviseMenu = new ToolStripMenuItem(\"–°–µ—Ä–≤–∏—Å\");\n            var settingsItem = new ToolStripMenuItem(\"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\");\n            var aboutItem = new ToolStripMenuItem(\"–û –ø—Ä–æ–≥—Ä–∞–º–º–µ\");\n            aboutItem.Click += (s, e) => ShowAboutDialog();\n\n            fileMenu.DropDownItems.Add(exitItem);\n            helpMenu.DropDownItems.Add(infoItem);\n            serviseMenu.DropDownItems.Add(settingsItem);\n            serviseMenu.DropDownItems.Add(aboutItem);\n            menuStrip.Items.AddRange(new ToolStripItem[] { fileMenu, helpMenu, serviseMenu });\n\n            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É\n            this.Controls.AddRange(new Control[] {\n                tabControlMain,\n                statusStrip,\n                menuStrip\n            });\n\n            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n            this.Tag = new { WelcomeLabel = lblWelcome, RoleLabel = lblRole };\n        }\n\n        private void InitializeModules()\n        {\n            try\n            {\n                // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π\n                var warehouseModule = new WarehouseModule();\n                var taskModule = new TaskModule();\n                var financeModule = new FinanceModule();\n                var hrModule = new HRModule();\n                var salesModule = new SalesModule();\n                var reportsModule = new ReportsModule();\n                var updatesModule = new UpdatesModule();\n                var settingsModule = new SettingsModule();\n\n                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫\n                tabControlMain.TabPages.Add(warehouseModule.GetTabPage());\n                tabControlMain.TabPages.Add(taskModule.GetTabPage());\n                tabControlMain.TabPages.Add(financeModule.GetTabPage());\n                tabControlMain.TabPages.Add(hrModule.GetTabPage());\n                tabControlMain.TabPages.Add(salesModule.GetTabPage());\n                tabControlMain.TabPages.Add(reportsModule.GetTabPage());\n                tabControlMain.TabPages.Add(updatesModule.GetTabPage());\n                tabControlMain.TabPages.Add(settingsModule.GetTabPage());\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: {ex.Message}\");\n            }\n        }\n\n        private void UpdateUserInterface()\n        {\n            var labels = this.Tag as dynamic;\n            if (labels != null)\n            {\n                labels.WelcomeLabel.Text = $\"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {currentUser.Username}\";\n                if (!string.IsNullOrEmpty(currentUser.FullName))\n                {\n                    labels.WelcomeLabel.Text += $\" ({currentUser.FullName})\";\n                }\n                labels.RoleLabel.Text = $\"–†–æ–ª—å: {currentUser.Role}\";\n            }\n        }\n\n        private void ShowAboutDialog()\n        {\n            MessageBox.Show(\n                \"–û—Ñ–∏—Å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ\\n\\n–í–µ—Ä—Å–∏—è 1.0\\n\\n–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Å–æ–º\",\n                \"–û –ø—Ä–æ–≥—Ä–∞–º–º–µ\",\n                MessageBoxButtons.OK,\n                MessageBoxIcon.Information\n            );\n        }\n\n        protected override void OnFormClosing(FormClosingEventArgs e)\n        {\n            base.OnFormClosing(e);\n            Application.Exit();\n        }\n    }\n}","size_bytes":5586},"Forms/ProductForm.cs":{"content":"Ôªøusing System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing officeApp.DataAccess;\nusing officeApp.Models;\n\nnamespace officeApp.Forms\n{\n    public class ProductForm : Form\n    {\n        private Product _product;\n        private ComboBox cmbName, cmbVolume, cmbStatus, cmbType;\n        private NumericUpDown numQuantity;\n        private Button btnSave, btnCancel;\n\n        public ProductForm(Product product = null)\n        {\n            _product = product ?? new Product();\n            InitializeForm();\n            LoadOptions();\n        }\n\n        private void InitializeForm()\n        {\n            this.Size = new Size(400, 320);\n            this.FormBorderStyle = FormBorderStyle.FixedDialog;\n            this.StartPosition = FormStartPosition.CenterParent;\n            this.Text = _product.Id == 0 ? \"–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç\" : \"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç\";\n            this.Padding = new Padding(10);\n\n            // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n            Label lblName = new Label()\n            {\n                Text = \"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\",\n                Location = new Point(20, 20),\n                Width = 100,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            cmbName = new ComboBox()\n            {\n                Location = new Point(130, 20),\n                Width = 200,\n                DropDownStyle = ComboBoxStyle.DropDownList,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            // –û–±—ä–µ–º\n            Label lblVolume = new Label()\n            {\n                Text = \"–û–±—ä–µ–º:\",\n                Location = new Point(20, 60),\n                Width = 100,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            cmbVolume = new ComboBox()\n            {\n                Location = new Point(130, 60),\n                Width = 200,\n                DropDownStyle = ComboBoxStyle.DropDownList,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n            Label lblQuantity = new Label()\n            {\n                Text = \"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:\",\n                Location = new Point(20, 100),\n                Width = 100,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            numQuantity = new NumericUpDown()\n            {\n                Location = new Point(130, 100),\n                Width = 100,\n                Minimum = 0,\n                Maximum = 10000,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            // –¢–∏–ø —Ç–æ–≤–∞—Ä–∞\n            Label lblType = new Label()\n            {\n                Text = \"–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:\",\n                Location = new Point(20, 140),\n                Width = 100,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            cmbType = new ComboBox()\n            {\n                Location = new Point(130, 140),\n                Width = 200,\n                DropDownStyle = ComboBoxStyle.DropDown,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            // –°—Ç–∞—Ç—É—Å\n            Label lblStatus = new Label()\n            {\n                Text = \"–°—Ç–∞—Ç—É—Å:\",\n                Location = new Point(20, 180),\n                Width = 100,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            cmbStatus = new ComboBox()\n            {\n                Location = new Point(130, 180),\n                Width = 200,\n                DropDownStyle = ComboBoxStyle.DropDownList,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            // –ö–Ω–æ–ø–∫–∏\n            btnSave = new Button()\n            {\n                Text = \"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å\",\n                Location = new Point(130, 230),\n                Size = new Size(80, 30),\n                Font = new Font(\"Segoe UI\", 9),\n                DialogResult = DialogResult.OK\n            };\n\n            btnCancel = new Button()\n            {\n                Text = \"–û—Ç–º–µ–Ω–∞\",\n                Location = new Point(220, 230),\n                Size = new Size(80, 30),\n                Font = new Font(\"Segoe UI\", 9),\n                DialogResult = DialogResult.Cancel\n            };\n\n            btnSave.Click += BtnSave_Click;\n            btnCancel.Click += BtnCancel_Click;\n\n            this.Controls.AddRange(new Control[] {\n                lblName, cmbName, lblVolume, cmbVolume, lblQuantity, numQuantity,\n                lblType, cmbType, lblStatus, cmbStatus, btnSave, btnCancel\n            });\n\n            this.AcceptButton = btnSave;\n            this.CancelButton = btnCancel;\n        }\n\n        private void LoadOptions()\n        {\n            var names = ProductRepository.GetStorageOptions(\"name\");\n            var volumes = ProductRepository.GetStorageOptions(\"volume\");\n            var statuses = ProductRepository.GetStorageOptions(\"status\");\n            var types = ProductRepository.GetStorageOptions(\"type\");\n\n            cmbName.Items.Clear();\n            cmbVolume.Items.Clear();\n            cmbStatus.Items.Clear();\n            cmbType.Items.Clear();\n\n            foreach (var option in names)\n                cmbName.Items.Add(option.Value);\n\n            foreach (var option in volumes)\n                cmbVolume.Items.Add(option.Value);\n\n            foreach (var option in statuses)\n                cmbStatus.Items.Add(option.Value);\n\n            foreach (var option in types)\n                cmbType.Items.Add(option.Value);\n\n            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º\n            if (_product.Id != 0)\n            {\n                cmbName.SelectedItem = _product.Name;\n                cmbVolume.SelectedItem = _product.Volume;\n                cmbStatus.SelectedItem = _product.Status;\n                cmbType.Text = _product.Type; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Text –¥–ª—è DropDown —Å—Ç–∏–ª—è\n                numQuantity.Value = _product.Quantity;\n            }\n            else\n            {\n                cmbName.SelectedIndex = cmbName.Items.Count > 0 ? 0 : -1;\n                cmbVolume.SelectedIndex = cmbVolume.Items.Count > 0 ? 0 : -1;\n                cmbStatus.SelectedIndex = cmbStatus.Items.Count > 0 ? 0 : -1;\n                cmbType.SelectedIndex = -1; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n                numQuantity.Value = 0;\n            }\n        }\n\n        private void BtnSave_Click(object sender, EventArgs e)\n        {\n            if (cmbName.SelectedItem == null || cmbVolume.SelectedItem == null || cmbStatus.SelectedItem == null)\n            {\n                MessageBox.Show(\"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –æ–±—ä–µ–º –∏ —Å—Ç–∞—Ç—É—Å\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                return;\n            }\n\n            _product.Name = cmbName.SelectedItem.ToString();\n            _product.Volume = cmbVolume.SelectedItem.ToString();\n            _product.Quantity = (int)numQuantity.Value;\n            _product.Status = cmbStatus.SelectedItem.ToString();\n            _product.Type = string.IsNullOrWhiteSpace(cmbType.Text) ? \"\" : cmbType.Text.Trim();\n\n            bool success;\n            if (_product.Id == 0)\n                success = ProductRepository.AddProduct(_product);\n            else\n                success = ProductRepository.UpdateProduct(_product);\n\n            if (success)\n            {\n                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ç–∏–ø, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n                if (!string.IsNullOrWhiteSpace(_product.Type) && !IsTypeInOptions(_product.Type))\n                {\n                    ProductRepository.AddStorageType(_product.Type);\n                }\n\n                this.DialogResult = DialogResult.OK;\n                this.Close();\n            }\n        }\n\n        /// <summary>\n        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–∏–ø –≤ —Å–ø–∏—Å–∫–µ –æ–ø—Ü–∏–π\n        /// </summary>\n        private bool IsTypeInOptions(string typeName)\n        {\n            for (int i = 0; i < cmbType.Items.Count; i++)\n            {\n                if (cmbType.Items[i].ToString().Equals(typeName, StringComparison.OrdinalIgnoreCase))\n                    return true;\n            }\n            return false;\n        }\n\n        private void BtnCancel_Click(object sender, EventArgs e)\n        {\n            this.DialogResult = DialogResult.Cancel;\n            this.Close();\n        }\n    }\n}","size_bytes":8540},"Models/Product.cs":{"content":"Ôªønamespace officeApp.Models\n{\n    public class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Volume { get; set; }\n        public int Quantity { get; set; }\n        public string Status { get; set; }\n        public string Group { get; set; }\n        public bool CountInTotal { get; set; } = true;\n        public string AdditionalInfo { get; set; }\n        public string Type { get; set; }\n        public bool MsgSend { get; set; } = false;\n    }\n}","size_bytes":515},"Models/ProductGroup.cs":{"content":"Ôªønamespace officeApp.Models\n{\n    public class ProductGroup\n    {\n        public string GroupName { get; set; }\n        public bool CountTogether { get; set; } = true;\n    }\n}","size_bytes":177},"Models/StorageOption.cs":{"content":"Ôªønamespace officeApp.Models\n{\n    public class StorageOption\n    {\n        public string OptionType { get; set; }\n        public string Value { get; set; }\n    }\n}","size_bytes":165},"Models/User.cs":{"content":"Ôªønamespace officeApp.Models\n{\n    public class User\n    {\n        public string Username { get; set; }\n        public string Role { get; set; }\n        public string Email { get; set; }\n        public string FullName { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string MiddleName { get; set; }\n    }\n}","size_bytes":378},"Modules/FinanceModule.cs":{"content":"Ôªøusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class FinanceModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private Label lblTitle;\n\n        public FinanceModule()\n        {\n            InitializeComponent();\n        }\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üí∞ –§–∏–Ω–∞–Ω—Å—ã\");\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Header\n            Panel headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(40, 167, 69);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–§–∏–Ω–∞–Ω—Å—ã\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.AutoSize = true;\n            lblTitle.Location = new Point(20, 20);\n\n            headerPanel.Controls.Add(lblTitle);\n\n            // Content\n            Label contentLabel = new Label();\n            contentLabel.Text = \"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å\";\n            contentLabel.Font = new Font(\"Segoe UI\", 12);\n            contentLabel.AutoSize = true;\n            contentLabel.Location = new Point(20, 100);\n\n            tabPage.Controls.AddRange(new Control[] { contentLabel, headerPanel });\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":1542},"Modules/HRModule.cs":{"content":"Ôªøusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class HRModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private Label lblTitle;\n\n        public HRModule()\n        {\n            InitializeComponent();\n        }\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üë• HR\");\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Header\n            Panel headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(255, 153, 51);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.AutoSize = true;\n            lblTitle.Location = new Point(20, 20);\n\n            headerPanel.Controls.Add(lblTitle);\n\n            // Content\n            Label contentLabel = new Label();\n            contentLabel.Text = \"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, –æ—Ç–ø—É—Å–∫–∞–º–∏ –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏\";\n            contentLabel.Font = new Font(\"Segoe UI\", 12);\n            contentLabel.AutoSize = true;\n            contentLabel.Location = new Point(20, 100);\n\n            tabPage.Controls.AddRange(new Control[] { contentLabel, headerPanel });\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":1583},"Modules/IOfficeModule.cs":{"content":"Ôªøusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public interface IOfficeModule\n    {\n        TabPage GetTabPage();\n    }\n}","size_bytes":140},"Modules/ReportsModule.cs":{"content":"Ôªøusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class ReportsModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private Label lblTitle;\n\n        public ReportsModule()\n        {\n            InitializeComponent();\n        }\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üìà –û—Ç—á–µ—Ç—ã\");\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Header\n            Panel headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(23, 162, 184);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.AutoSize = true;\n            lblTitle.Location = new Point(20, 20);\n\n            headerPanel.Controls.Add(lblTitle);\n\n            // Content\n            Label contentLabel = new Label();\n            contentLabel.Text = \"–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º —Å–∏—Å—Ç–µ–º—ã\";\n            contentLabel.Font = new Font(\"Segoe UI\", 12);\n            contentLabel.AutoSize = true;\n            contentLabel.Location = new Point(20, 100);\n\n            tabPage.Controls.AddRange(new Control[] { contentLabel, headerPanel });\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":1563},"Modules/SalesModule.cs":{"content":"Ôªøusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class SalesModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private Label lblTitle;\n\n        public SalesModule()\n        {\n            InitializeComponent();\n        }\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üìä –ü—Ä–æ–¥–∞–∂–∏\");\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Header\n            Panel headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(111, 66, 193);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–ú–æ–¥—É–ª—å –ø—Ä–æ–¥–∞–∂\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.AutoSize = true;\n            lblTitle.Location = new Point(20, 20);\n\n            headerPanel.Controls.Add(lblTitle);\n\n            // Content\n            Label contentLabel = new Label();\n            contentLabel.Text = \"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏, –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏\";\n            contentLabel.Font = new Font(\"Segoe UI\", 12);\n            contentLabel.AutoSize = true;\n            contentLabel.Location = new Point(20, 100);\n\n            tabPage.Controls.AddRange(new Control[] { contentLabel, headerPanel });\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":1575},"Modules/SettingsModule.cs":{"content":"Ôªøusing officeApp.DataAccess;\nusing officeApp.Forms;\nusing officeApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class SettingsModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private DataGridView dgvProducts;\n        private Button btnAddProduct, btnEditProduct, btnDeleteProduct, btnRefresh;\n        private TextBox txtSearch;\n        private ComboBox cmbFilterName, cmbFilterVolume, cmbFilterStatus;\n        private Panel headerPanel, statsPanel;\n        private Label lblTitle, lblTotalItems, lblLowStock, lblOutOfStock;\n\n        public SettingsModule()\n        {\n            InitializeComponent();\n            LoadProducts();\n            LoadFilterOptions();\n            UpdateStatistics();\n        }\n\n        private void TxtSearch_Enter(object sender, EventArgs e)\n        {\n            if (txtSearch.Text == \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\")\n            {\n                txtSearch.Text = \"\";\n                txtSearch.ForeColor = Color.Black;\n            }\n        }\n\n        private void TxtSearch_Leave(object sender, EventArgs e)\n        {\n            if (string.IsNullOrWhiteSpace(txtSearch.Text))\n            {\n                txtSearch.Text = \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\";\n                txtSearch.ForeColor = Color.Gray;\n            }\n        }\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üå§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏\");\n            tabPage.Size = new Size(1000, 700);\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Header Panel\n            headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(65, 48, 110);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.AutoSize = true;\n            lblTitle.Location = new Point(20, 20);\n\n            headerPanel.Controls.Add(lblTitle);\n\n            // Statistics Panel\n            statsPanel = new Panel();\n            statsPanel.Dock = DockStyle.Top;\n            statsPanel.Height = 70;\n            statsPanel.BackColor = Color.White;\n            statsPanel.Padding = new Padding(10);\n\n            lblTotalItems = CreateStatLabel(\"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0\", 20, Color.FromArgb(59, 89, 152));\n            lblLowStock = CreateStatLabel(\"–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: 0\", 200, Color.FromArgb(255, 153, 51));\n            lblOutOfStock = CreateStatLabel(\"–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: 0\", 380, Color.FromArgb(220, 53, 69));\n\n            statsPanel.Controls.AddRange(new Control[] { lblTotalItems, lblLowStock, lblOutOfStock });\n\n            // Search and Filter Panel\n            Panel searchPanel = new Panel();\n            searchPanel.Dock = DockStyle.Top;\n            searchPanel.Height = 60;\n            searchPanel.BackColor = Color.White;\n            searchPanel.Padding = new Padding(10);\n\n            txtSearch = new TextBox();\n            txtSearch.Location = new Point(10, 15);\n            txtSearch.Size = new Size(200, 30);\n            txtSearch.Font = new Font(\"Segoe UI\", 10);\n            txtSearch.ForeColor = Color.Gray;\n            txtSearch.Text = \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\";\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è placeholder —ç—Ñ—Ñ–µ–∫—Ç–∞\n            txtSearch.Enter += TxtSearch_Enter;\n            txtSearch.Leave += TxtSearch_Leave;\n\n            cmbFilterName = CreateFilterComboBox(\"–í—Å–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è\", 220);\n            cmbFilterVolume = CreateFilterComboBox(\"–í—Å–µ –æ–±—ä–µ–º—ã\", 350);\n            cmbFilterStatus = CreateFilterComboBox(\"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã\", 480);\n\n            btnRefresh = new Button();\n            btnRefresh.Text = \"üîÑ\";\n            btnRefresh.Font = new Font(\"Segoe UI\", 12);\n            btnRefresh.Size = new Size(40, 30);\n            btnRefresh.Location = new Point(610, 15);\n            btnRefresh.FlatStyle = FlatStyle.Flat;\n            btnRefresh.FlatAppearance.BorderSize = 0;\n            btnRefresh.BackColor = Color.FromArgb(59, 89, 152);\n            btnRefresh.ForeColor = Color.White;\n            btnRefresh.Click += BtnRefresh_Click;\n\n            searchPanel.Controls.AddRange(new Control[] {\n                txtSearch, cmbFilterName, cmbFilterVolume, cmbFilterStatus, btnRefresh\n            });\n\n            // DataGridView\n            dgvProducts = new DataGridView();\n            dgvProducts.Dock = DockStyle.Fill;\n            dgvProducts.AutoGenerateColumns = false;\n            dgvProducts.SelectionMode = DataGridViewSelectionMode.FullRowSelect;\n            dgvProducts.ReadOnly = true;\n            dgvProducts.BackgroundColor = Color.White;\n            dgvProducts.BorderStyle = BorderStyle.None;\n            dgvProducts.Font = new Font(\"Segoe UI\", 10);\n\n            // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è DataGridView\n            dgvProducts.DefaultCellStyle.SelectionBackColor = Color.FromArgb(240, 240, 245);\n            dgvProducts.DefaultCellStyle.SelectionForeColor = Color.Black;\n            dgvProducts.RowHeadersVisible = false;\n            dgvProducts.AllowUserToAddRows = false;\n            dgvProducts.AllowUserToDeleteRows = false;\n\n            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫\n            dgvProducts.Columns.AddRange(new DataGridViewColumn[] {\n                new DataGridViewTextBoxColumn() { Name = \"Id\", DataPropertyName = \"Id\", HeaderText = \"ID\", Width = 60 },\n                new DataGridViewTextBoxColumn() { Name = \"Name\", DataPropertyName = \"Name\", HeaderText = \"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\", Width = 180 },\n                new DataGridViewTextBoxColumn() { Name = \"Volume\", DataPropertyName = \"Volume\", HeaderText = \"–û–±—ä–µ–º\", Width = 120 },\n                new DataGridViewTextBoxColumn() { Name = \"Quantity\", DataPropertyName = \"Quantity\", HeaderText = \"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\", Width = 100 },\n                new DataGridViewTextBoxColumn() { Name = \"Status\", DataPropertyName = \"Status\", HeaderText = \"–°—Ç–∞—Ç—É—Å\", Width = 140 }\n            });\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ +/-\n            var increaseColumn = new DataGridViewButtonColumn()\n            {\n                HeaderText = \"+\",\n                Text = \"+\",\n                UseColumnTextForButtonValue = true,\n                Width = 50,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            var decreaseColumn = new DataGridViewButtonColumn()\n            {\n                HeaderText = \"-\",\n                Text = \"-\",\n                UseColumnTextForButtonValue = true,\n                Width = 50,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            dgvProducts.Columns.Add(increaseColumn);\n            dgvProducts.Columns.Add(decreaseColumn);\n\n            // Action Buttons Panel\n            Panel actionPanel = new Panel();\n            actionPanel.Dock = DockStyle.Bottom;\n            actionPanel.Height = 70;\n            actionPanel.BackColor = Color.White;\n            actionPanel.Padding = new Padding(20);\n\n            btnAddProduct = CreateActionButton(\"‚ûï –î–æ–±–∞–≤–∏—Ç—å\", Color.FromArgb(40, 167, 69));\n            btnEditProduct = CreateActionButton(\"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å\", Color.FromArgb(23, 162, 184));\n            btnDeleteProduct = CreateActionButton(\"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å\", Color.FromArgb(220, 53, 69));\n\n            btnAddProduct.Location = new Point(20, 15);\n            btnEditProduct.Location = new Point(150, 15);\n            btnDeleteProduct.Location = new Point(320, 15);\n\n            actionPanel.Controls.AddRange(new Control[] { btnAddProduct, btnEditProduct, btnDeleteProduct });\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π\n            btnAddProduct.Click += BtnAddProduct_Click;\n            btnEditProduct.Click += BtnEditProduct_Click;\n            btnDeleteProduct.Click += BtnDeleteProduct_Click;\n            dgvProducts.CellClick += DgvProducts_CellClick;\n            txtSearch.TextChanged += TxtSearch_TextChanged;\n            cmbFilterName.SelectedIndexChanged += Filter_Changed;\n            cmbFilterVolume.SelectedIndexChanged += Filter_Changed;\n            cmbFilterStatus.SelectedIndexChanged += Filter_Changed;\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ tabPage\n            tabPage.Controls.AddRange(new Control[] {\n                dgvProducts, actionPanel, searchPanel, statsPanel, headerPanel\n            });\n        }\n\n        private Label CreateStatLabel(string text, int x, Color color)\n        {\n            return new Label()\n            {\n                Text = text,\n                Font = new Font(\"Segoe UI\", 11, FontStyle.Bold),\n                ForeColor = color,\n                AutoSize = true,\n                Location = new Point(x, 20)\n            };\n        }\n\n        private ComboBox CreateFilterComboBox(string text, int x)\n        {\n            var cmb = new ComboBox()\n            {\n                Location = new Point(x, 15),\n                Size = new Size(120, 30),\n                DropDownStyle = ComboBoxStyle.DropDownList,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n            cmb.Items.Add(text);\n            return cmb;\n        }\n\n        private Button CreateActionButton(string text, Color backColor)\n        {\n            return new Button()\n            {\n                Text = text,\n                Size = new Size(140, 40),\n                BackColor = backColor,\n                ForeColor = Color.White,\n                Font = new Font(\"Segoe UI\", 10, FontStyle.Bold),\n                FlatStyle = FlatStyle.Flat,\n                Cursor = Cursors.Hand\n            };\n        }\n\n        private void LoadProducts()\n        {\n            try\n            {\n                List<Product> products = ProductRepository.GetAllProducts();\n                dgvProducts.DataSource = products;\n                UpdateStatistics();\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ex.Message}\");\n            }\n        }\n\n        private void UpdateStatistics()\n        {\n            if (dgvProducts.DataSource is List<Product> products)\n            {\n                int total = 0;\n                int lowStock = 0;\n                int outOfStock = 0;\n\n                foreach (var product in products)\n                {\n                    total += product.Quantity;\n                    if (product.Quantity == 0) outOfStock++;\n                    else if (product.Quantity < 10) lowStock++;\n                }\n\n                lblTotalItems.Text = $\"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}\";\n                lblLowStock.Text = $\"–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {lowStock}\";\n                lblOutOfStock.Text = $\"–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: {outOfStock}\";\n            }\n        }\n\n        private void LoadFilterOptions()\n        {\n            try\n            {\n                var nameOptions = ProductRepository.GetStorageOptions(\"name\");\n                var volumeOptions = ProductRepository.GetStorageOptions(\"volume\");\n                var statusOptions = ProductRepository.GetStorageOptions(\"status\");\n\n                cmbFilterName.Items.Clear();\n                cmbFilterVolume.Items.Clear();\n                cmbFilterStatus.Items.Clear();\n\n                cmbFilterName.Items.Add(\"–í—Å–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è\");\n                cmbFilterVolume.Items.Add(\"–í—Å–µ –æ–±—ä–µ–º—ã\");\n                cmbFilterStatus.Items.Add(\"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã\");\n\n                foreach (var option in nameOptions)\n                    cmbFilterName.Items.Add(option.Value);\n\n                foreach (var option in volumeOptions)\n                    cmbFilterVolume.Items.Add(option.Value);\n\n                foreach (var option in statusOptions)\n                    cmbFilterStatus.Items.Add(option.Value);\n\n                cmbFilterName.SelectedIndex = 0;\n                cmbFilterVolume.SelectedIndex = 0;\n                cmbFilterStatus.SelectedIndex = 0;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {ex.Message}\");\n            }\n        }\n\n        private void DgvProducts_CellClick(object sender, DataGridViewCellEventArgs e)\n        {\n            if (e.RowIndex < 0) return;\n\n            if (e.ColumnIndex == 5) ChangeQuantity(e.RowIndex, 1);\n            else if (e.ColumnIndex == 6) ChangeQuantity(e.RowIndex, -1);\n        }\n\n        private void ChangeQuantity(int rowIndex, int change)\n        {\n            var product = dgvProducts.Rows[rowIndex].DataBoundItem as Product;\n            if (product != null)\n            {\n                int newQuantity = product.Quantity + change;\n                if (newQuantity < 0) newQuantity = 0;\n\n                if (ProductRepository.UpdateProductQuantity(product.Id, newQuantity))\n                {\n                    product.Quantity = newQuantity;\n                    dgvProducts.InvalidateRow(rowIndex);\n                    UpdateStatistics();\n                }\n            }\n        }\n\n        private void BtnRefresh_Click(object sender, EventArgs e)\n        {\n            LoadProducts();\n            LoadFilterOptions();\n        }\n\n        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ TxtSearch_TextChanged\n        private void TxtSearch_TextChanged(object sender, EventArgs e)\n        {\n            if (txtSearch.Text != \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\")\n            {\n                ApplyFilters();\n            }\n        }\n\n        private void Filter_Changed(object sender, EventArgs e)\n        {\n            ApplyFilters();\n        }\n\n        private void ApplyFilters()\n        {\n            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n        }\n\n        private void BtnAddProduct_Click(object sender, EventArgs e)\n        {\n            ShowProductForm(null);\n        }\n\n        private void BtnEditProduct_Click(object sender, EventArgs e)\n        {\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var product = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                ShowProductForm(product);\n            }\n            else\n            {\n                MessageBox.Show(\"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\");\n            }\n        }\n\n        private void ShowProductForm(Product product)\n        {\n            ProductForm form = new ProductForm(product);\n            if (form.ShowDialog() == DialogResult.OK)\n            {\n                LoadProducts();\n            }\n        }\n\n        private void BtnDeleteProduct_Click(object sender, EventArgs e)\n        {\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var product = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                if (MessageBox.Show($\"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç '{product.Name}'?\", \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\",\n                    MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)\n                {\n                    if (ProductRepository.DeleteProduct(product.Id))\n                    {\n                        LoadProducts();\n                    }\n                }\n            }\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":15575},"Modules/TaskModule.cs":{"content":"Ôªøusing officeApp.DataAccess;\nusing officeApp.Forms;\nusing officeApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class TaskModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private DataGridView dgvProducts;\n        private Button btnAddProduct, btnEditProduct, btnDeleteProduct, btnRefresh;\n        private TextBox txtSearch;\n        private ComboBox cmbFilterName, cmbFilterVolume, cmbFilterStatus;\n        private Panel headerPanel, statsPanel;\n        private Label lblTitle, lblTotalItems, lblLowStock, lblOutOfStock;\n\n        public TaskModule()\n        {\n            InitializeComponent();\n            LoadProducts();\n            LoadFilterOptions();\n            UpdateStatistics();\n        }\n\n        private void TxtSearch_Enter(object sender, EventArgs e)\n        {\n            if (txtSearch.Text == \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\")\n            {\n                txtSearch.Text = \"\";\n                txtSearch.ForeColor = Color.Black;\n            }\n        }\n\n        private void TxtSearch_Leave(object sender, EventArgs e)\n        {\n            if (string.IsNullOrWhiteSpace(txtSearch.Text))\n            {\n                txtSearch.Text = \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\";\n                txtSearch.ForeColor = Color.Gray;\n            }\n        }\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üå§ –ó–∞–¥–∞—á–∏\");\n            tabPage.Size = new Size(1000, 700);\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Header Panel\n            headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(65, 48, 110);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.AutoSize = true;\n            lblTitle.Location = new Point(20, 20);\n\n            headerPanel.Controls.Add(lblTitle);\n\n            // Statistics Panel\n            statsPanel = new Panel();\n            statsPanel.Dock = DockStyle.Top;\n            statsPanel.Height = 70;\n            statsPanel.BackColor = Color.White;\n            statsPanel.Padding = new Padding(10);\n\n            lblTotalItems = CreateStatLabel(\"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0\", 20, Color.FromArgb(59, 89, 152));\n            lblLowStock = CreateStatLabel(\"–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: 0\", 200, Color.FromArgb(255, 153, 51));\n            lblOutOfStock = CreateStatLabel(\"–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: 0\", 380, Color.FromArgb(220, 53, 69));\n\n            statsPanel.Controls.AddRange(new Control[] { lblTotalItems, lblLowStock, lblOutOfStock });\n\n            // Search and Filter Panel\n            Panel searchPanel = new Panel();\n            searchPanel.Dock = DockStyle.Top;\n            searchPanel.Height = 60;\n            searchPanel.BackColor = Color.White;\n            searchPanel.Padding = new Padding(10);\n\n            txtSearch = new TextBox();\n            txtSearch.Location = new Point(10, 15);\n            txtSearch.Size = new Size(200, 30);\n            txtSearch.Font = new Font(\"Segoe UI\", 10);\n            txtSearch.ForeColor = Color.Gray;\n            txtSearch.Text = \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\";\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è placeholder —ç—Ñ—Ñ–µ–∫—Ç–∞\n            txtSearch.Enter += TxtSearch_Enter;\n            txtSearch.Leave += TxtSearch_Leave;\n\n            cmbFilterName = CreateFilterComboBox(\"–í—Å–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è\", 220);\n            cmbFilterVolume = CreateFilterComboBox(\"–í—Å–µ –æ–±—ä–µ–º—ã\", 350);\n            cmbFilterStatus = CreateFilterComboBox(\"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã\", 480);\n\n            btnRefresh = new Button();\n            btnRefresh.Text = \"üîÑ\";\n            btnRefresh.Font = new Font(\"Segoe UI\", 12);\n            btnRefresh.Size = new Size(40, 30);\n            btnRefresh.Location = new Point(610, 15);\n            btnRefresh.FlatStyle = FlatStyle.Flat;\n            btnRefresh.FlatAppearance.BorderSize = 0;\n            btnRefresh.BackColor = Color.FromArgb(59, 89, 152);\n            btnRefresh.ForeColor = Color.White;\n            btnRefresh.Click += BtnRefresh_Click;\n\n            searchPanel.Controls.AddRange(new Control[] {\n                txtSearch, cmbFilterName, cmbFilterVolume, cmbFilterStatus, btnRefresh\n            });\n\n            // DataGridView\n            dgvProducts = new DataGridView();\n            dgvProducts.Dock = DockStyle.Fill;\n            dgvProducts.AutoGenerateColumns = false;\n            dgvProducts.SelectionMode = DataGridViewSelectionMode.FullRowSelect;\n            dgvProducts.ReadOnly = true;\n            dgvProducts.BackgroundColor = Color.White;\n            dgvProducts.BorderStyle = BorderStyle.None;\n            dgvProducts.Font = new Font(\"Segoe UI\", 10);\n\n            // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è DataGridView\n            dgvProducts.DefaultCellStyle.SelectionBackColor = Color.FromArgb(240, 240, 245);\n            dgvProducts.DefaultCellStyle.SelectionForeColor = Color.Black;\n            dgvProducts.RowHeadersVisible = false;\n            dgvProducts.AllowUserToAddRows = false;\n            dgvProducts.AllowUserToDeleteRows = false;\n\n            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫\n            dgvProducts.Columns.AddRange(new DataGridViewColumn[] {\n                new DataGridViewTextBoxColumn() { Name = \"Id\", DataPropertyName = \"Id\", HeaderText = \"ID\", Width = 60 },\n                new DataGridViewTextBoxColumn() { Name = \"Name\", DataPropertyName = \"Name\", HeaderText = \"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\", Width = 180 },\n                new DataGridViewTextBoxColumn() { Name = \"Volume\", DataPropertyName = \"Volume\", HeaderText = \"–û–±—ä–µ–º\", Width = 120 },\n                new DataGridViewTextBoxColumn() { Name = \"Quantity\", DataPropertyName = \"Quantity\", HeaderText = \"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\", Width = 100 },\n                new DataGridViewTextBoxColumn() { Name = \"Status\", DataPropertyName = \"Status\", HeaderText = \"–°—Ç–∞—Ç—É—Å\", Width = 140 }\n            });\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ +/-\n            var increaseColumn = new DataGridViewButtonColumn()\n            {\n                HeaderText = \"+\",\n                Text = \"+\",\n                UseColumnTextForButtonValue = true,\n                Width = 50,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            var decreaseColumn = new DataGridViewButtonColumn()\n            {\n                HeaderText = \"-\",\n                Text = \"-\",\n                UseColumnTextForButtonValue = true,\n                Width = 50,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            dgvProducts.Columns.Add(increaseColumn);\n            dgvProducts.Columns.Add(decreaseColumn);\n\n            // Action Buttons Panel\n            Panel actionPanel = new Panel();\n            actionPanel.Dock = DockStyle.Bottom;\n            actionPanel.Height = 70;\n            actionPanel.BackColor = Color.White;\n            actionPanel.Padding = new Padding(20);\n\n            btnAddProduct = CreateActionButton(\"‚ûï –î–æ–±–∞–≤–∏—Ç—å\", Color.FromArgb(40, 167, 69));\n            btnEditProduct = CreateActionButton(\"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å\", Color.FromArgb(23, 162, 184));\n            btnDeleteProduct = CreateActionButton(\"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å\", Color.FromArgb(220, 53, 69));\n\n            btnAddProduct.Location = new Point(20, 15);\n            btnEditProduct.Location = new Point(150, 15);\n            btnDeleteProduct.Location = new Point(320, 15);\n\n            actionPanel.Controls.AddRange(new Control[] { btnAddProduct, btnEditProduct, btnDeleteProduct });\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π\n            btnAddProduct.Click += BtnAddProduct_Click;\n            btnEditProduct.Click += BtnEditProduct_Click;\n            btnDeleteProduct.Click += BtnDeleteProduct_Click;\n            dgvProducts.CellClick += DgvProducts_CellClick;\n            txtSearch.TextChanged += TxtSearch_TextChanged;\n            cmbFilterName.SelectedIndexChanged += Filter_Changed;\n            cmbFilterVolume.SelectedIndexChanged += Filter_Changed;\n            cmbFilterStatus.SelectedIndexChanged += Filter_Changed;\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ tabPage\n            tabPage.Controls.AddRange(new Control[] {\n                dgvProducts, actionPanel, searchPanel, statsPanel, headerPanel\n            });\n        }\n\n        private Label CreateStatLabel(string text, int x, Color color)\n        {\n            return new Label()\n            {\n                Text = text,\n                Font = new Font(\"Segoe UI\", 11, FontStyle.Bold),\n                ForeColor = color,\n                AutoSize = true,\n                Location = new Point(x, 20)\n            };\n        }\n\n        private ComboBox CreateFilterComboBox(string text, int x)\n        {\n            var cmb = new ComboBox()\n            {\n                Location = new Point(x, 15),\n                Size = new Size(120, 30),\n                DropDownStyle = ComboBoxStyle.DropDownList,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n            cmb.Items.Add(text);\n            return cmb;\n        }\n\n        private Button CreateActionButton(string text, Color backColor)\n        {\n            return new Button()\n            {\n                Text = text,\n                Size = new Size(140, 40),\n                BackColor = backColor,\n                ForeColor = Color.White,\n                Font = new Font(\"Segoe UI\", 10, FontStyle.Bold),\n                FlatStyle = FlatStyle.Flat,\n                Cursor = Cursors.Hand\n            };\n        }\n\n        private void LoadProducts()\n        {\n            try\n            {\n                List<Product> products = ProductRepository.GetAllProducts();\n                dgvProducts.DataSource = products;\n                UpdateStatistics();\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ex.Message}\");\n            }\n        }\n\n        private void UpdateStatistics()\n        {\n            if (dgvProducts.DataSource is List<Product> products)\n            {\n                int total = 0;\n                int lowStock = 0;\n                int outOfStock = 0;\n\n                foreach (var product in products)\n                {\n                    total += product.Quantity;\n                    if (product.Quantity == 0) outOfStock++;\n                    else if (product.Quantity < 10) lowStock++;\n                }\n\n                lblTotalItems.Text = $\"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}\";\n                lblLowStock.Text = $\"–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {lowStock}\";\n                lblOutOfStock.Text = $\"–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: {outOfStock}\";\n            }\n        }\n\n        private void LoadFilterOptions()\n        {\n            try\n            {\n                var nameOptions = ProductRepository.GetStorageOptions(\"name\");\n                var volumeOptions = ProductRepository.GetStorageOptions(\"volume\");\n                var statusOptions = ProductRepository.GetStorageOptions(\"status\");\n\n                cmbFilterName.Items.Clear();\n                cmbFilterVolume.Items.Clear();\n                cmbFilterStatus.Items.Clear();\n\n                cmbFilterName.Items.Add(\"–í—Å–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è\");\n                cmbFilterVolume.Items.Add(\"–í—Å–µ –æ–±—ä–µ–º—ã\");\n                cmbFilterStatus.Items.Add(\"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã\");\n\n                foreach (var option in nameOptions)\n                    cmbFilterName.Items.Add(option.Value);\n\n                foreach (var option in volumeOptions)\n                    cmbFilterVolume.Items.Add(option.Value);\n\n                foreach (var option in statusOptions)\n                    cmbFilterStatus.Items.Add(option.Value);\n\n                cmbFilterName.SelectedIndex = 0;\n                cmbFilterVolume.SelectedIndex = 0;\n                cmbFilterStatus.SelectedIndex = 0;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {ex.Message}\");\n            }\n        }\n\n        private void DgvProducts_CellClick(object sender, DataGridViewCellEventArgs e)\n        {\n            if (e.RowIndex < 0) return;\n\n            if (e.ColumnIndex == 5) ChangeQuantity(e.RowIndex, 1);\n            else if (e.ColumnIndex == 6) ChangeQuantity(e.RowIndex, -1);\n        }\n\n        private void ChangeQuantity(int rowIndex, int change)\n        {\n            var product = dgvProducts.Rows[rowIndex].DataBoundItem as Product;\n            if (product != null)\n            {\n                int newQuantity = product.Quantity + change;\n                if (newQuantity < 0) newQuantity = 0;\n\n                if (ProductRepository.UpdateProductQuantity(product.Id, newQuantity))\n                {\n                    product.Quantity = newQuantity;\n                    dgvProducts.InvalidateRow(rowIndex);\n                    UpdateStatistics();\n                }\n            }\n        }\n\n        private void BtnRefresh_Click(object sender, EventArgs e)\n        {\n            LoadProducts();\n            LoadFilterOptions();\n        }\n\n        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ TxtSearch_TextChanged\n        private void TxtSearch_TextChanged(object sender, EventArgs e)\n        {\n            if (txtSearch.Text != \"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\")\n            {\n                ApplyFilters();\n            }\n        }\n\n        private void Filter_Changed(object sender, EventArgs e)\n        {\n            ApplyFilters();\n        }\n\n        private void ApplyFilters()\n        {\n            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n        }\n\n        private void BtnAddProduct_Click(object sender, EventArgs e)\n        {\n            ShowProductForm(null);\n        }\n\n        private void BtnEditProduct_Click(object sender, EventArgs e)\n        {\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var product = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                ShowProductForm(product);\n            }\n            else\n            {\n                MessageBox.Show(\"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\");\n            }\n        }\n\n        private void ShowProductForm(Product product)\n        {\n            ProductForm form = new ProductForm(product);\n            if (form.ShowDialog() == DialogResult.OK)\n            {\n                LoadProducts();\n            }\n        }\n\n        private void BtnDeleteProduct_Click(object sender, EventArgs e)\n        {\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var product = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                if (MessageBox.Show($\"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç '{product.Name}'?\", \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\",\n                    MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)\n                {\n                    if (ProductRepository.DeleteProduct(product.Id))\n                    {\n                        LoadProducts();\n                    }\n                }\n            }\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":15545},"Modules/UpdatesModule.cs":{"content":"Ôªøusing officeApp.DataAccess;\nusing officeApp.Forms;\nusing officeApp.Models;\nusing officeApp.Services;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class UpdatesModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private Panel headerPanel, contentPanel, actionPanel;\n        private Label lblTitle, lblCurrentVersion, lblDatabaseVersion, lblUpdateStatus;\n        private Button btnCheckUpdates, btnDownloadUpdate;\n        private ProgressBar progressBar;\n\n        public UpdatesModule()\n        {\n            InitializeComponent();\n            CheckAndDisplayUpdateInfo();\n        }\n\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üå§ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è\");\n            tabPage.Size = new Size(1000, 700);\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Header Panel\n            headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(65, 48, 110);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.AutoSize = true;\n            lblTitle.Location = new Point(20, 20);\n\n            headerPanel.Controls.Add(lblTitle);\n\n            // Content Panel for update info\n            contentPanel = new Panel();\n            contentPanel.Dock = DockStyle.Fill;\n            contentPanel.BackColor = Color.White;\n            contentPanel.Padding = new Padding(20);\n\n            // Current version info\n            lblCurrentVersion = new Label();\n            lblCurrentVersion.Text = \"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: –ó–∞–≥—Ä—É–∑–∫–∞...\";\n            lblCurrentVersion.Font = new Font(\"Segoe UI\", 12, FontStyle.Bold);\n            lblCurrentVersion.ForeColor = Color.FromArgb(52, 73, 94);\n            lblCurrentVersion.Location = new Point(20, 20);\n            lblCurrentVersion.AutoSize = true;\n\n            // Database version info\n            lblDatabaseVersion = new Label();\n            lblDatabaseVersion.Text = \"–î–æ—Å—Ç—É–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ó–∞–≥—Ä—É–∑–∫–∞...\";\n            lblDatabaseVersion.Font = new Font(\"Segoe UI\", 12, FontStyle.Bold);\n            lblDatabaseVersion.ForeColor = Color.FromArgb(52, 73, 94);\n            lblDatabaseVersion.Location = new Point(20, 60);\n            lblDatabaseVersion.AutoSize = true;\n\n            // Update status\n            lblUpdateStatus = new Label();\n            lblUpdateStatus.Text = \"–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞...\";\n            lblUpdateStatus.Font = new Font(\"Segoe UI\", 11);\n            lblUpdateStatus.ForeColor = Color.FromArgb(108, 117, 125);\n            lblUpdateStatus.Location = new Point(20, 100);\n            lblUpdateStatus.AutoSize = true;\n\n            contentPanel.Controls.AddRange(new Control[] { lblCurrentVersion, lblDatabaseVersion, lblUpdateStatus });\n\n            // Action Panel for update buttons\n            actionPanel = new Panel();\n            actionPanel.Dock = DockStyle.Bottom;\n            actionPanel.Height = 80;\n            actionPanel.BackColor = Color.FromArgb(248, 249, 250);\n            actionPanel.Padding = new Padding(20);\n\n            btnCheckUpdates = new Button();\n            btnCheckUpdates.Text = \"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\";\n            btnCheckUpdates.Size = new Size(200, 40);\n            btnCheckUpdates.Location = new Point(20, 20);\n            btnCheckUpdates.BackColor = Color.FromArgb(59, 89, 152);\n            btnCheckUpdates.ForeColor = Color.White;\n            btnCheckUpdates.Font = new Font(\"Segoe UI\", 10, FontStyle.Bold);\n            btnCheckUpdates.FlatStyle = FlatStyle.Flat;\n            btnCheckUpdates.Cursor = Cursors.Hand;\n            btnCheckUpdates.Click += BtnCheckUpdates_Click;\n\n            btnDownloadUpdate = new Button();\n            btnDownloadUpdate.Text = \"üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\";\n            btnDownloadUpdate.Size = new Size(200, 40);\n            btnDownloadUpdate.Location = new Point(240, 20);\n            btnDownloadUpdate.BackColor = Color.FromArgb(40, 167, 69);\n            btnDownloadUpdate.ForeColor = Color.White;\n            btnDownloadUpdate.Font = new Font(\"Segoe UI\", 10, FontStyle.Bold);\n            btnDownloadUpdate.FlatStyle = FlatStyle.Flat;\n            btnDownloadUpdate.Cursor = Cursors.Hand;\n            btnDownloadUpdate.Enabled = false;\n            btnDownloadUpdate.Click += BtnDownloadUpdate_Click;\n\n            // Progress bar for downloads\n            progressBar = new ProgressBar();\n            progressBar.Location = new Point(460, 30);\n            progressBar.Size = new Size(200, 20);\n            progressBar.Visible = false;\n\n            actionPanel.Controls.AddRange(new Control[] { btnCheckUpdates, btnDownloadUpdate, progressBar });\n\n            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ tabPage\n            tabPage.Controls.AddRange(new Control[] {\n                contentPanel, actionPanel, headerPanel\n            });\n        }\n\n        private Label CreateStatLabel(string text, int x, Color color)\n        {\n            return new Label()\n            {\n                Text = text,\n                Font = new Font(\"Segoe UI\", 11, FontStyle.Bold),\n                ForeColor = color,\n                AutoSize = true,\n                Location = new Point(x, 20)\n            };\n        }\n\n        private ComboBox CreateFilterComboBox(string text, int x)\n        {\n            var cmb = new ComboBox()\n            {\n                Location = new Point(x, 15),\n                Size = new Size(120, 30),\n                DropDownStyle = ComboBoxStyle.DropDownList,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n            cmb.Items.Add(text);\n            return cmb;\n        }\n\n        private Button CreateActionButton(string text, Color backColor)\n        {\n            return new Button()\n            {\n                Text = text,\n                Size = new Size(140, 40),\n                BackColor = backColor,\n                ForeColor = Color.White,\n                Font = new Font(\"Segoe UI\", 10, FontStyle.Bold),\n                FlatStyle = FlatStyle.Flat,\n                Cursor = Cursors.Hand\n            };\n        }\n\n        /// <summary>\n        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö\n        /// </summary>\n        private void CheckAndDisplayUpdateInfo()\n        {\n            try\n            {\n                string currentVersion = ProductRepository.GetCurrentAppVersion();\n                string databaseVersion = ProductRepository.GetAppVersionFromDatabase();\n\n                lblCurrentVersion.Text = $\"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {currentVersion}\";\n                lblDatabaseVersion.Text = $\"–î–æ—Å—Ç—É–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: {databaseVersion}\";\n\n                if (currentVersion.Equals(databaseVersion))\n                {\n                    lblUpdateStatus.Text = \"–°—Ç–∞—Ç—É—Å: –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è\";\n                    lblUpdateStatus.ForeColor = Color.FromArgb(40, 167, 69);\n                    btnDownloadUpdate.Enabled = false;\n                }\n                else\n                {\n                    lblUpdateStatus.Text = \"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!\";\n                    lblUpdateStatus.ForeColor = Color.FromArgb(220, 53, 69);\n                    btnDownloadUpdate.Enabled = true;\n                }\n            }\n            catch (Exception ex)\n            {\n                lblCurrentVersion.Text = \"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\";\n                lblDatabaseVersion.Text = \"–î–æ—Å—Ç—É–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\";\n                lblUpdateStatus.Text = $\"–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - {ex.Message}\";\n                lblUpdateStatus.ForeColor = Color.FromArgb(220, 53, 69);\n            }\n        }\n\n        /// <summary>\n        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n        /// </summary>\n        private void BtnCheckUpdates_Click(object sender, EventArgs e)\n        {\n            CheckAndDisplayUpdateInfo();\n            MessageBox.Show(\"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞\", \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n\n        /// <summary>\n        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n        /// </summary>\n        private async void BtnDownloadUpdate_Click(object sender, EventArgs e)\n        {\n            btnDownloadUpdate.Enabled = false;\n            btnCheckUpdates.Enabled = false;\n            progressBar.Visible = true;\n            progressBar.Value = 0;\n\n            try\n            {\n                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n                bool result = await UpdateService.ShowUpdateDialogAsync();\n                \n                if (result)\n                {\n                    CheckAndDisplayUpdateInfo(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}\", \"–û—à–∏–±–∫–∞\", \n                    MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n            finally\n            {\n                btnDownloadUpdate.Enabled = true;\n                btnCheckUpdates.Enabled = true;\n                progressBar.Visible = false;\n            }\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":9909},"Modules/WarehouseModule.cs":{"content":"using officeApp.DataAccess;\nusing officeApp.Forms;\nusing officeApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing System.Windows.Forms;\n\nnamespace officeApp.Modules\n{\n    public class WarehouseModule : IOfficeModule\n    {\n        private TabPage tabPage;\n        private SplitContainer mainSplitContainer;\n        \n        // Left panel - Groups TreeView\n        private TreeView treeGroups;\n        private Button btnManageGroups, btnRefreshGroups;\n        private Label lblGroupsTitle;\n        \n        // Right panel - Products grid and controls  \n        private DataGridView dgvProducts;\n        private Button btnAddProduct, btnEditProduct, btnDeleteProduct, btnAssignGroup, btnManageTypes;\n        private TextBox txtSearch;\n        private ComboBox cmbFilterVolume, cmbFilterStatus, cmbFilterType, cmbSortBy;\n        private CheckBox chkSortDesc, chkSelectAll;\n        private Panel headerPanel, searchPanel, statsPanel, actionPanel, massActionsPanel;\n        private Button btnMassChangeType, btnMassChangeStatus, btnMassDelete;\n        private Label lblTitle, lblTotalItems, lblLowStock, lblOutOfStock, lblSelectedGroup;\n\n        private List<Product> allProducts;\n        private List<Product> filteredProducts;\n        private string currentSelectedGroup = \"\";\n\n        public WarehouseModule()\n        {\n            InitializeComponent();\n            LoadProductsAndGroups();\n            LoadFilterOptions();\n            UpdateStatistics();\n        }\n\n        private void InitializeComponent()\n        {\n            tabPage = new TabPage(\"üì¶ –°–∫–ª–∞–¥\");\n            tabPage.Size = new Size(1200, 800);\n            tabPage.BackColor = Color.FromArgb(245, 245, 248);\n\n            // Create main split container\n            mainSplitContainer = new SplitContainer();\n            mainSplitContainer.Dock = DockStyle.Fill;\n            mainSplitContainer.SplitterDistance = 280;\n            mainSplitContainer.FixedPanel = FixedPanel.Panel1;\n            mainSplitContainer.BorderStyle = BorderStyle.FixedSingle;\n\n            InitializeLeftPanel();\n            InitializeRightPanel();\n\n            tabPage.Controls.Add(mainSplitContainer);\n        }\n\n        private void InitializeLeftPanel()\n        {\n            // Left panel setup\n            mainSplitContainer.Panel1.BackColor = Color.FromArgb(248, 249, 250);\n\n            // Groups title\n            lblGroupsTitle = new Label();\n            lblGroupsTitle.Text = \"üìÅ –ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤\";\n            lblGroupsTitle.Font = new Font(\"Segoe UI\", 12, FontStyle.Bold);\n            lblGroupsTitle.ForeColor = Color.FromArgb(73, 80, 87);\n            lblGroupsTitle.Location = new Point(15, 15);\n            lblGroupsTitle.AutoSize = true;\n\n            // TreeView for groups - make it responsive\n            treeGroups = new TreeView();\n            treeGroups.Location = new Point(15, 50);\n            treeGroups.Size = new Size(250, 495);\n            treeGroups.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom;\n            treeGroups.Font = new Font(\"Segoe UI\", 10);\n            treeGroups.BorderStyle = BorderStyle.FixedSingle;\n            treeGroups.BackColor = Color.White;\n            treeGroups.ShowLines = true;\n            treeGroups.ShowPlusMinus = true;\n            treeGroups.ShowRootLines = false;\n            treeGroups.HideSelection = false;\n            treeGroups.AfterSelect += TreeGroups_AfterSelect;\n\n            // Group management buttons - make them anchored to bottom\n            btnManageGroups = CreateGroupButton(\"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\", 15, 565, Color.FromArgb(108, 117, 125));\n            btnRefreshGroups = CreateGroupButton(\"üîÑ –û–±–Ω–æ–≤–∏—Ç—å\", 140, 565, Color.FromArgb(23, 162, 184));\n            btnManageGroups.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;\n            btnRefreshGroups.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;\n\n            btnManageGroups.Click += BtnManageGroups_Click;\n            btnRefreshGroups.Click += BtnRefreshGroups_Click;\n\n            mainSplitContainer.Panel1.Controls.AddRange(new Control[] {\n                lblGroupsTitle, treeGroups, btnManageGroups, btnRefreshGroups\n            });\n        }\n\n        private void InitializeRightPanel()\n        {\n            // Header Panel\n            headerPanel = new Panel();\n            headerPanel.Dock = DockStyle.Top;\n            headerPanel.Height = 80;\n            headerPanel.BackColor = Color.FromArgb(52, 73, 94);\n\n            lblTitle = new Label();\n            lblTitle.Text = \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º\";\n            lblTitle.Font = new Font(\"Segoe UI\", 16, FontStyle.Bold);\n            lblTitle.ForeColor = Color.White;\n            lblTitle.Location = new Point(20, 15);\n            lblTitle.AutoSize = true;\n\n            lblSelectedGroup = new Label();\n            lblSelectedGroup.Text = \"–ü–æ–∫–∞–∑–∞–Ω—ã: –í—Å–µ —Ç–æ–≤–∞—Ä—ã\";\n            lblSelectedGroup.Font = new Font(\"Segoe UI\", 10);\n            lblSelectedGroup.ForeColor = Color.FromArgb(189, 195, 199);\n            lblSelectedGroup.Location = new Point(20, 45);\n            lblSelectedGroup.AutoSize = true;\n\n            headerPanel.Controls.AddRange(new Control[] { lblTitle, lblSelectedGroup });\n\n            // Statistics Panel\n            statsPanel = new Panel();\n            statsPanel.Dock = DockStyle.Top;\n            statsPanel.Height = 70;\n            statsPanel.BackColor = Color.White;\n            statsPanel.Padding = new Padding(10);\n\n            lblTotalItems = CreateStatLabel(\"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0\", 20, Color.FromArgb(52, 73, 94));\n            lblLowStock = CreateStatLabel(\"–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: 0\", 220, Color.FromArgb(230, 126, 34));\n            lblOutOfStock = CreateStatLabel(\"–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: 0\", 420, Color.FromArgb(231, 76, 60));\n\n            statsPanel.Controls.AddRange(new Control[] { lblTotalItems, lblLowStock, lblOutOfStock });\n\n            // Search and Filter Panel\n            searchPanel = new Panel();\n            searchPanel.Dock = DockStyle.Top;\n            searchPanel.Height = 60;\n            searchPanel.BackColor = Color.White;\n            searchPanel.Padding = new Padding(10);\n\n            txtSearch = new TextBox();\n            txtSearch.Location = new Point(15, 15);\n            txtSearch.Size = new Size(250, 30);\n            txtSearch.Font = new Font(\"Segoe UI\", 10);\n            txtSearch.ForeColor = Color.Gray;\n            txtSearch.Text = \"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\";\n            txtSearch.Enter += TxtSearch_Enter;\n            txtSearch.Leave += TxtSearch_Leave;\n            txtSearch.TextChanged += TxtSearch_TextChanged;\n\n            cmbFilterVolume = CreateFilterComboBox(\"–í—Å–µ –æ–±—ä–µ–º—ã\", 280);\n            cmbFilterStatus = CreateFilterComboBox(\"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã\", 420);\n            cmbFilterType = CreateFilterComboBox(\"–í—Å–µ —Ç–∏–ø—ã\", 560);\n\n            Label lblSort = new Label()\n            {\n                Text = \"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:\",\n                Location = new Point(720, 18),\n                Size = new Size(70, 20),\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            cmbSortBy = new ComboBox()\n            {\n                Location = new Point(795, 15),\n                Size = new Size(120, 30),\n                Font = new Font(\"Segoe UI\", 9),\n                DropDownStyle = ComboBoxStyle.DropDownList\n            };\n            cmbSortBy.Items.AddRange(new string[] {\n                \"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\", \"–û–±—ä–µ–º\", \"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\", \"–°—Ç–∞—Ç—É—Å\", \"–ì—Ä—É–ø–ø–∞\", \"–¢–∏–ø\"\n            });\n            cmbSortBy.SelectedIndex = 0;\n            cmbSortBy.SelectedIndexChanged += Filter_Changed;\n\n            chkSortDesc = new CheckBox()\n            {\n                Text = \"–£–±—ã–≤.\",\n                Location = new Point(925, 17),\n                Size = new Size(60, 25),\n                Font = new Font(\"Segoe UI\", 9)\n            };\n            chkSortDesc.CheckedChanged += Filter_Changed;\n\n            Button btnClearFilters = new Button();\n            btnClearFilters.Text = \"‚ùå –°–±—Ä–æ—Å–∏—Ç—å\";\n            btnClearFilters.Font = new Font(\"Segoe UI\", 9);\n            btnClearFilters.Size = new Size(80, 30);\n            btnClearFilters.Location = new Point(995, 15);\n            btnClearFilters.FlatStyle = FlatStyle.Flat;\n            btnClearFilters.BackColor = Color.FromArgb(108, 117, 125);\n            btnClearFilters.ForeColor = Color.White;\n            btnClearFilters.Click += BtnClearFilters_Click;\n\n            searchPanel.Controls.AddRange(new Control[] {\n                txtSearch, cmbFilterVolume, cmbFilterStatus, cmbFilterType, \n                lblSort, cmbSortBy, chkSortDesc, btnClearFilters\n            });\n\n            // Mass Actions Panel\n            massActionsPanel = new Panel();\n            massActionsPanel.Dock = DockStyle.Top;\n            massActionsPanel.Height = 50;\n            massActionsPanel.BackColor = Color.FromArgb(248, 249, 250);\n            massActionsPanel.Padding = new Padding(10);\n            massActionsPanel.Visible = false; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n            chkSelectAll = new CheckBox()\n            {\n                Text = \"–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ\",\n                Location = new Point(15, 12),\n                Size = new Size(100, 25),\n                Font = new Font(\"Segoe UI\", 9)\n            };\n            chkSelectAll.CheckedChanged += ChkSelectAll_CheckedChanged;\n\n            btnMassChangeType = new Button()\n            {\n                Text = \"üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø\",\n                Location = new Point(125, 10),\n                Size = new Size(120, 30),\n                Font = new Font(\"Segoe UI\", 9),\n                BackColor = Color.FromArgb(23, 162, 184),\n                ForeColor = Color.White,\n                FlatStyle = FlatStyle.Flat\n            };\n            btnMassChangeType.Click += BtnMassChangeType_Click;\n\n            btnMassChangeStatus = new Button()\n            {\n                Text = \"üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å\",\n                Location = new Point(255, 10),\n                Size = new Size(130, 30),\n                Font = new Font(\"Segoe UI\", 9),\n                BackColor = Color.FromArgb(255, 193, 7),\n                ForeColor = Color.Black,\n                FlatStyle = FlatStyle.Flat\n            };\n            btnMassChangeStatus.Click += BtnMassChangeStatus_Click;\n\n            btnMassDelete = new Button()\n            {\n                Text = \"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ\",\n                Location = new Point(395, 10),\n                Size = new Size(150, 30),\n                Font = new Font(\"Segoe UI\", 9),\n                BackColor = Color.FromArgb(220, 53, 69),\n                ForeColor = Color.White,\n                FlatStyle = FlatStyle.Flat\n            };\n            btnMassDelete.Click += BtnMassDelete_Click;\n\n            massActionsPanel.Controls.AddRange(new Control[] {\n                chkSelectAll, btnMassChangeType, btnMassChangeStatus, btnMassDelete\n            });\n\n            // DataGridView\n            dgvProducts = new DataGridView();\n            dgvProducts.Dock = DockStyle.Fill;\n            dgvProducts.AutoGenerateColumns = false;\n            dgvProducts.SelectionMode = DataGridViewSelectionMode.FullRowSelect;\n            dgvProducts.ReadOnly = true;\n            dgvProducts.BackgroundColor = Color.White;\n            dgvProducts.BorderStyle = BorderStyle.None;\n            dgvProducts.Font = new Font(\"Segoe UI\", 10);\n            dgvProducts.AllowUserToAddRows = false;\n            dgvProducts.AllowUserToDeleteRows = false;\n            dgvProducts.AllowUserToResizeRows = false;\n            dgvProducts.RowHeadersVisible = false;\n            dgvProducts.MultiSelect = false;\n\n            // Enhanced grid styling\n            dgvProducts.DefaultCellStyle.SelectionBackColor = Color.FromArgb(52, 152, 219);\n            dgvProducts.DefaultCellStyle.SelectionForeColor = Color.White;\n            dgvProducts.DefaultCellStyle.BackColor = Color.White;\n            dgvProducts.DefaultCellStyle.ForeColor = Color.FromArgb(44, 62, 80);\n            dgvProducts.GridColor = Color.FromArgb(236, 240, 241);\n            dgvProducts.CellFormatting += DgvProducts_CellFormatting;\n\n            // Setup enhanced columns\n            SetupDataGridViewColumns();\n\n            dgvProducts.CellClick += DgvProducts_CellClick;\n            dgvProducts.SelectionChanged += DgvProducts_SelectionChanged;\n\n            // Action Panel\n            actionPanel = new Panel();\n            actionPanel.Dock = DockStyle.Bottom;\n            actionPanel.Height = 80;\n            actionPanel.BackColor = Color.FromArgb(248, 249, 250);\n            actionPanel.Padding = new Padding(20);\n\n            btnAddProduct = CreateActionButton(\"‚ûï –î–æ–±–∞–≤–∏—Ç—å\", Color.FromArgb(40, 167, 69), 20, 15);\n            btnEditProduct = CreateActionButton(\"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\", Color.FromArgb(23, 162, 184), 180, 15);\n            btnDeleteProduct = CreateActionButton(\"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å\", Color.FromArgb(220, 53, 69), 360, 15);\n            btnAssignGroup = CreateActionButton(\"üìÅ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É\", Color.FromArgb(108, 117, 125), 520, 15);\n            btnManageTypes = CreateActionButton(\"üè∑Ô∏è –¢–∏–ø—ã\", Color.FromArgb(156, 39, 176), 680, 15);\n            Button btnExportExcel = CreateActionButton(\"üìä –≠–∫—Å–ø–æ—Ä—Ç Excel\", Color.FromArgb(75, 192, 192), 840, 15);\n\n            btnAddProduct.Click += BtnAddProduct_Click;\n            btnEditProduct.Click += BtnEditProduct_Click;\n            btnDeleteProduct.Click += BtnDeleteProduct_Click;\n            btnExportExcel.Click += BtnExportExcel_Click;\n            btnAssignGroup.Click += BtnAssignGroup_Click;\n            btnManageTypes.Click += BtnManageTypes_Click;\n\n            actionPanel.Controls.AddRange(new Control[] {\n                btnAddProduct, btnEditProduct, btnDeleteProduct, btnAssignGroup, btnManageTypes, btnExportExcel\n            });\n\n            // Add all panels to right panel\n            mainSplitContainer.Panel2.Controls.AddRange(new Control[] {\n                dgvProducts, actionPanel, massActionsPanel, searchPanel, statsPanel, headerPanel\n            });\n        }\n\n        private void SetupDataGridViewColumns()\n        {\n            dgvProducts.Columns.Clear();\n            \n            dgvProducts.Columns.AddRange(new DataGridViewColumn[] {\n                new DataGridViewCheckBoxColumn() {\n                    Name = \"Selected\", HeaderText = \"‚òë\",\n                    Width = 40, ReadOnly = false\n                },\n                new DataGridViewTextBoxColumn() {\n                    Name = \"Id\", DataPropertyName = \"Id\", HeaderText = \"ID\",\n                    Width = 60, ReadOnly = true, Visible = false\n                },\n                new DataGridViewTextBoxColumn() {\n                    Name = \"Name\", DataPropertyName = \"Name\", HeaderText = \"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\",\n                    Width = 180, ReadOnly = true\n                },\n                new DataGridViewTextBoxColumn() {\n                    Name = \"Volume\", DataPropertyName = \"Volume\", HeaderText = \"üìè –û–±—ä–µ–º\",\n                    Width = 90, ReadOnly = true\n                },\n                new DataGridViewTextBoxColumn() {\n                    Name = \"Quantity\", DataPropertyName = \"Quantity\", HeaderText = \"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\",\n                    Width = 90, ReadOnly = true\n                },\n                new DataGridViewTextBoxColumn() {\n                    Name = \"Status\", DataPropertyName = \"Status\", HeaderText = \"üîÑ –°—Ç–∞—Ç—É—Å\",\n                    Width = 100, ReadOnly = true\n                },\n                new DataGridViewTextBoxColumn() {\n                    Name = \"Group\", DataPropertyName = \"Group\", HeaderText = \"üìÅ –ì—Ä—É–ø–ø–∞\",\n                    Width = 110, ReadOnly = true\n                },\n                new DataGridViewTextBoxColumn() {\n                    Name = \"Type\", DataPropertyName = \"Type\", HeaderText = \"üè∑Ô∏è –¢–∏–ø\",\n                    Width = 90, ReadOnly = true\n                }\n            });\n\n            // Add action buttons columns\n            var increaseColumn = new DataGridViewButtonColumn()\n            {\n                HeaderText = \"‚ûï\",\n                Text = \"+1\",\n                UseColumnTextForButtonValue = true,\n                Width = 60,\n                FlatStyle = FlatStyle.Flat,\n                Name = \"IncreaseColumn\"\n            };\n\n            var decreaseColumn = new DataGridViewButtonColumn()\n            {\n                HeaderText = \"‚ûñ\",\n                Text = \"-1\",\n                UseColumnTextForButtonValue = true,\n                Width = 60,\n                FlatStyle = FlatStyle.Flat,\n                Name = \"DecreaseColumn\"\n            };\n\n            var notifyColumn = new DataGridViewButtonColumn()\n            {\n                HeaderText = \"üìß\",\n                Text = \"–£–≤–µ–¥–æ–º–∏—Ç—å\",\n                UseColumnTextForButtonValue = false,\n                Width = 90,\n                FlatStyle = FlatStyle.Flat,\n                Name = \"NotifyColumn\"\n            };\n\n            dgvProducts.Columns.Add(increaseColumn);\n            dgvProducts.Columns.Add(decreaseColumn);\n            dgvProducts.Columns.Add(notifyColumn);\n\n            // Style headers\n            foreach (DataGridViewColumn column in dgvProducts.Columns)\n            {\n                column.HeaderCell.Style.BackColor = Color.FromArgb(52, 73, 94);\n                column.HeaderCell.Style.ForeColor = Color.White;\n                column.HeaderCell.Style.Font = new Font(\"Segoe UI\", 10, FontStyle.Bold);\n            }\n        }\n\n        private Button CreateGroupButton(string text, int x, int y, Color color)\n        {\n            return new Button()\n            {\n                Text = text,\n                Location = new Point(x, y),\n                Size = new Size(120, 35),\n                BackColor = color,\n                ForeColor = Color.White,\n                Font = new Font(\"Segoe UI\", 9, FontStyle.Bold),\n                FlatStyle = FlatStyle.Flat,\n                Cursor = Cursors.Hand\n            };\n        }\n\n        private Label CreateStatLabel(string text, int x, Color color)\n        {\n            return new Label()\n            {\n                Text = text,\n                Font = new Font(\"Segoe UI\", 11, FontStyle.Bold),\n                ForeColor = color,\n                AutoSize = true,\n                Location = new Point(x, 25)\n            };\n        }\n\n        private ComboBox CreateFilterComboBox(string text, int x)\n        {\n            var cmb = new ComboBox()\n            {\n                Location = new Point(x, 15),\n                Size = new Size(130, 30),\n                DropDownStyle = ComboBoxStyle.DropDownList,\n                Font = new Font(\"Segoe UI\", 9)\n            };\n            cmb.Items.Add(text);\n            cmb.SelectedIndex = 0;\n            cmb.SelectedIndexChanged += Filter_Changed;\n            return cmb;\n        }\n\n        private Button CreateActionButton(string text, Color backColor, int x, int y)\n        {\n            return new Button()\n            {\n                Text = text,\n                Size = new Size(150, 40),\n                Location = new Point(x, y),\n                BackColor = backColor,\n                ForeColor = Color.White,\n                Font = new Font(\"Segoe UI\", 10, FontStyle.Bold),\n                FlatStyle = FlatStyle.Flat,\n                Cursor = Cursors.Hand\n            };\n        }\n\n        private void LoadProductsAndGroups()\n        {\n            try\n            {\n                allProducts = ProductRepository.GetAllProducts();\n                filteredProducts = new List<Product>(allProducts);\n                LoadGroupsTree();\n                RefreshProductsDisplay();\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {ex.Message}\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n\n        private void LoadGroupsTree()\n        {\n            treeGroups.Nodes.Clear();\n\n            // Add \"All products\" node\n            var allNode = new TreeNode(\"üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã\");\n            allNode.Tag = \"\";\n            allNode.ForeColor = Color.FromArgb(52, 73, 94);\n            allNode.NodeFont = new Font(\"Segoe UI\", 10, FontStyle.Bold);\n            treeGroups.Nodes.Add(allNode);\n\n            // Add \"No group\" node\n            var ungroupedProducts = allProducts.Where(p => string.IsNullOrEmpty(p.Group)).ToList();\n            var noGroupNode = new TreeNode($\"üìÇ –ë–µ–∑ –≥—Ä—É–ø–ø—ã ({ungroupedProducts.Count})\");\n            noGroupNode.Tag = \"NO_GROUP\";\n            noGroupNode.ForeColor = Color.FromArgb(149, 165, 166);\n            treeGroups.Nodes.Add(noGroupNode);\n\n            // Add group nodes\n            var groups = ProductRepository.GetProductGroups();\n            foreach (var group in groups.OrderBy(g => g))\n            {\n                var productsInGroup = allProducts.Where(p => p.Group == group).ToList();\n                var groupNode = new TreeNode($\"üìÅ {group} ({productsInGroup.Count})\");\n                groupNode.Tag = group;\n                groupNode.ForeColor = Color.FromArgb(52, 73, 94);\n                treeGroups.Nodes.Add(groupNode);\n            }\n\n            // Select \"All products\" by default\n            if (treeGroups.Nodes.Count > 0)\n            {\n                treeGroups.SelectedNode = allNode;\n                currentSelectedGroup = \"\";\n            }\n        }\n\n        private void RefreshProductsDisplay()\n        {\n            ApplyFilters();\n            dgvProducts.DataSource = filteredProducts;\n            UpdateStatistics();\n        }\n\n        private void TreeGroups_AfterSelect(object sender, TreeViewEventArgs e)\n        {\n            if (e.Node?.Tag != null)\n            {\n                string selectedGroup = e.Node.Tag.ToString();\n                currentSelectedGroup = selectedGroup;\n\n                if (selectedGroup == \"\")\n                {\n                    lblSelectedGroup.Text = \"–ü–æ–∫–∞–∑–∞–Ω—ã: –í—Å–µ —Ç–æ–≤–∞—Ä—ã\";\n                    filteredProducts = new List<Product>(allProducts);\n                }\n                else if (selectedGroup == \"NO_GROUP\")\n                {\n                    lblSelectedGroup.Text = \"–ü–æ–∫–∞–∑–∞–Ω—ã: –¢–æ–≤–∞—Ä—ã –±–µ–∑ –≥—Ä—É–ø–ø—ã\";\n                    filteredProducts = allProducts.Where(p => string.IsNullOrEmpty(p.Group)).ToList();\n                }\n                else\n                {\n                    lblSelectedGroup.Text = $\"–ü–æ–∫–∞–∑–∞–Ω—ã: –ì—Ä—É–ø–ø–∞ \\\"{selectedGroup}\\\"\";\n                    filteredProducts = allProducts.Where(p => p.Group == selectedGroup).ToList();\n                }\n\n                ApplyFilters();\n                dgvProducts.DataSource = filteredProducts;\n                UpdateStatistics();\n            }\n        }\n\n        private void ApplyFilters()\n        {\n            var baseProducts = GetBaseProductsByGroup();\n\n            // Apply search filter\n            if (!string.IsNullOrEmpty(txtSearch.Text) && txtSearch.Text != \"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\")\n            {\n                baseProducts = baseProducts.Where(p => \n                    p.Name.ToLower().Contains(txtSearch.Text.ToLower()) ||\n                    p.Volume.ToLower().Contains(txtSearch.Text.ToLower())).ToList();\n            }\n\n            // Apply volume filter\n            if (cmbFilterVolume.SelectedIndex > 0)\n            {\n                string selectedVolume = cmbFilterVolume.SelectedItem.ToString();\n                baseProducts = baseProducts.Where(p => p.Volume == selectedVolume).ToList();\n            }\n\n            // Apply status filter\n            if (cmbFilterStatus.SelectedIndex > 0)\n            {\n                string selectedStatus = cmbFilterStatus.SelectedItem.ToString();\n                baseProducts = baseProducts.Where(p => p.Status == selectedStatus).ToList();\n            }\n\n            filteredProducts = baseProducts;\n        }\n\n        private List<Product> GetBaseProductsByGroup()\n        {\n            if (currentSelectedGroup == \"\")\n            {\n                return new List<Product>(allProducts);\n            }\n            else if (currentSelectedGroup == \"NO_GROUP\")\n            {\n                return allProducts.Where(p => string.IsNullOrEmpty(p.Group)).ToList();\n            }\n            else\n            {\n                return allProducts.Where(p => p.Group == currentSelectedGroup).ToList();\n            }\n        }\n\n        private void UpdateStatistics()\n        {\n            if (filteredProducts != null)\n            {\n                int total = filteredProducts.Sum(p => p.Quantity);\n                int lowStock = filteredProducts.Count(p => p.Quantity > 0 && p.Quantity < 10);\n                int outOfStock = filteredProducts.Count(p => p.Quantity == 0);\n\n                lblTotalItems.Text = $\"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}\";\n                lblLowStock.Text = $\"–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {lowStock}\";\n                lblOutOfStock.Text = $\"–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: {outOfStock}\";\n            }\n        }\n\n        private void LoadFilterOptions()\n        {\n            try\n            {\n                var volumeOptions = ProductRepository.GetStorageOptions(\"volume\");\n                var statusOptions = ProductRepository.GetStorageOptions(\"status\");\n\n                cmbFilterVolume.Items.Clear();\n                cmbFilterStatus.Items.Clear();\n\n                cmbFilterVolume.Items.Add(\"–í—Å–µ –æ–±—ä–µ–º—ã\");\n                cmbFilterStatus.Items.Add(\"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã\");\n\n                foreach (var option in volumeOptions)\n                    cmbFilterVolume.Items.Add(option.Value);\n\n                foreach (var option in statusOptions)\n                    cmbFilterStatus.Items.Add(option.Value);\n\n                cmbFilterVolume.SelectedIndex = 0;\n                cmbFilterStatus.SelectedIndex = 0;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {ex.Message}\");\n            }\n        }\n\n        // Event Handlers\n        private void TxtSearch_Enter(object sender, EventArgs e)\n        {\n            if (txtSearch.Text == \"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\")\n            {\n                txtSearch.Text = \"\";\n                txtSearch.ForeColor = Color.Black;\n            }\n        }\n\n        private void TxtSearch_Leave(object sender, EventArgs e)\n        {\n            if (string.IsNullOrWhiteSpace(txtSearch.Text))\n            {\n                txtSearch.Text = \"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\";\n                txtSearch.ForeColor = Color.Gray;\n            }\n        }\n\n        private void TxtSearch_TextChanged(object sender, EventArgs e)\n        {\n            if (txtSearch.Text != \"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\")\n            {\n                RefreshProductsDisplay();\n            }\n        }\n\n        private void Filter_Changed(object sender, EventArgs e)\n        {\n            RefreshProductsDisplay();\n        }\n\n        private void BtnClearFilters_Click(object sender, EventArgs e)\n        {\n            txtSearch.Text = \"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...\";\n            txtSearch.ForeColor = Color.Gray;\n            cmbFilterVolume.SelectedIndex = 0;\n            cmbFilterStatus.SelectedIndex = 0;\n            RefreshProductsDisplay();\n        }\n\n        private void DgvProducts_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\n        {\n            if (e.RowIndex >= 0 && dgvProducts.Rows[e.RowIndex].DataBoundItem is Product product)\n            {\n                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ \"–û–±—Ä–∞–∑\" - –¥–ª—è —Ç–∞–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ\n                bool isObrazType = product.Type.Equals(\"–û–±—Ä–∞–∑\", StringComparison.OrdinalIgnoreCase);\n\n                if (isObrazType)\n                {\n                    // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ \"–û–±—Ä–∞–∑\" –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞\n                    e.CellStyle.BackColor = Color.White;\n                    e.CellStyle.ForeColor = Color.FromArgb(44, 62, 80);\n                }\n                else\n                {\n                    // Color coding based on stock levels - use e.CellStyle to avoid persistent formatting issues\n                    if (product.Quantity == 0)\n                    {\n                        e.CellStyle.BackColor = Color.FromArgb(253, 237, 237);\n                        e.CellStyle.ForeColor = Color.FromArgb(183, 28, 28);\n                    }\n                    else if (product.Quantity < 10)\n                    {\n                        e.CellStyle.BackColor = Color.FromArgb(255, 248, 225);\n                        e.CellStyle.ForeColor = Color.FromArgb(191, 144, 0);\n                    }\n                    else\n                    {\n                        // Reset to normal colors for adequate stock levels\n                        e.CellStyle.BackColor = Color.White;\n                        e.CellStyle.ForeColor = Color.FromArgb(44, 62, 80);\n                    }\n                }\n\n                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ MsgSend\n                if (e.ColumnIndex == dgvProducts.Columns[\"NotifyColumn\"].Index)\n                {\n                    var cell = dgvProducts.Rows[e.RowIndex].Cells[e.ColumnIndex];\n                    if (product.MsgSend && product.Quantity < 10)\n                    {\n                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å MsgSend=true –∏ –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º\n                        cell.Style.BackColor = Color.FromArgb(255, 193, 7); // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç\n                        cell.Style.ForeColor = Color.FromArgb(33, 37, 41);\n                        cell.Value = \"üìß –£–≤–µ–¥–æ–º–∏—Ç—å\";\n                    }\n                    else\n                    {\n                        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n                        cell.Style.BackColor = Color.LightGray;\n                        cell.Style.ForeColor = Color.Gray;\n                        cell.Value = \"-\";\n                    }\n                }\n            }\n        }\n\n        private void DgvProducts_CellClick(object sender, DataGridViewCellEventArgs e)\n        {\n            if (e.RowIndex < 0) return;\n\n            if (e.ColumnIndex == dgvProducts.Columns[\"IncreaseColumn\"].Index)\n            {\n                ChangeQuantity(e.RowIndex, 1);\n            }\n            else if (e.ColumnIndex == dgvProducts.Columns[\"DecreaseColumn\"].Index)\n            {\n                ChangeQuantity(e.RowIndex, -1);\n            }\n            else if (e.ColumnIndex == dgvProducts.Columns[\"NotifyColumn\"].Index)\n            {\n                var product = dgvProducts.Rows[e.RowIndex].DataBoundItem as Product;\n                if (product != null && product.MsgSend && product.Quantity < 10)\n                {\n                    SendLowStockNotification(e.RowIndex);\n                }\n                else\n                {\n                    MessageBox.Show(\"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ª—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏ (–º–µ–Ω—å—à–µ 10) –∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\", \n                        \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n        }\n\n        private void DgvProducts_SelectionChanged(object sender, EventArgs e)\n        {\n            bool hasSelection = dgvProducts.SelectedRows.Count > 0;\n            btnEditProduct.Enabled = hasSelection;\n            btnDeleteProduct.Enabled = hasSelection;\n            btnAssignGroup.Enabled = hasSelection;\n        }\n\n        private void ChangeQuantity(int rowIndex, int change)\n        {\n            try\n            {\n                var product = dgvProducts.Rows[rowIndex].DataBoundItem as Product;\n                if (product != null)\n                {\n                    int newQuantity = product.Quantity + change;\n                    if (newQuantity < 0)\n                    {\n                        MessageBox.Show(\"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º\", \"–û—à–∏–±–∫–∞\",\n                            MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                        return;\n                    }\n\n                    if (ProductRepository.UpdateProductQuantity(product.Id, newQuantity))\n                    {\n                        product.Quantity = newQuantity;\n                        dgvProducts.InvalidateRow(rowIndex);\n                        UpdateStatistics();\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {ex.Message}\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n\n        private void SendLowStockNotification(int rowIndex)\n        {\n            try\n            {\n                var product = dgvProducts.Rows[rowIndex].DataBoundItem as Product;\n                if (product != null && product.MsgSend && product.Quantity < 10)\n                {\n                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ email –∞–¥—Ä–µ—Å–∞\n                    string email = ShowEmailInputDialog($\"–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞–ª—ã—Ö –∑–∞–ø–∞—Å–∞—Ö —Ç–æ–≤–∞—Ä–∞ '{product.Name}':\");\n\n                    if (!string.IsNullOrWhiteSpace(email))\n                    {\n                        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n                        string subject = $\"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–ª—ã—Ö –∑–∞–ø–∞—Å–∞—Ö: {product.Name}\";\n                        string message = $@\"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–ª—ã—Ö –∑–∞–ø–∞—Å–∞—Ö\n\n–¢–æ–≤–∞—Ä: {product.Name}\n–û–±—ä–µ–º: {product.Volume}\n–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {product.Quantity}\n–°—Ç–∞—Ç—É—Å: {product.Status}\n–ì—Ä—É–ø–ø–∞: {product.Group}\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.\";\n\n                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email —á–µ—Ä–µ–∑ SMTP –∏–ª–∏ API\n                        // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π \"–æ—Ç–ø—Ä–∞–≤–∫–µ\"\n                        MessageBox.Show($@\"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {email}\n\n{subject}\n\n{message}\", \n                            \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ\", \n                            MessageBoxButtons.OK, \n                            MessageBoxIcon.Information);\n                    }\n                }\n                else\n                {\n                    MessageBox.Show(\"–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\", \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\",\n                        MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n\n        private void BtnManageGroups_Click(object sender, EventArgs e)\n        {\n            // Open group management dialog\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var selectedProduct = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                if (selectedProduct != null)\n                {\n                    using (var groupForm = new GroupManagementForm(selectedProduct))\n                    {\n                        if (groupForm.ShowDialog() == DialogResult.OK)\n                        {\n                            // Refresh data after group management\n                            LoadProductsAndGroups();\n                        }\n                    }\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π\", \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", \n                    MessageBoxButtons.OK, MessageBoxIcon.Information);\n            }\n        }\n\n        private void BtnRefreshGroups_Click(object sender, EventArgs e)\n        {\n            LoadProductsAndGroups();\n            MessageBox.Show(\"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\", \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", \n                MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n\n        private void BtnAddProduct_Click(object sender, EventArgs e)\n        {\n            ShowProductForm(null);\n        }\n\n        private void BtnEditProduct_Click(object sender, EventArgs e)\n        {\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var product = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                ShowProductForm(product);\n            }\n        }\n\n        private void ShowProductForm(Product product)\n        {\n            ProductForm form = new ProductForm(product);\n            if (form.ShowDialog() == DialogResult.OK)\n            {\n                LoadProductsAndGroups();\n            }\n        }\n\n        private void BtnDeleteProduct_Click(object sender, EventArgs e)\n        {\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var product = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                if (MessageBox.Show($\"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{product.Name}'?\", \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\",\n                    MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)\n                {\n                    if (ProductRepository.DeleteProduct(product.Id))\n                    {\n                        LoadProductsAndGroups();\n                    }\n                }\n            }\n        }\n\n        private void BtnAssignGroup_Click(object sender, EventArgs e)\n        {\n            if (dgvProducts.SelectedRows.Count > 0)\n            {\n                var product = dgvProducts.SelectedRows[0].DataBoundItem as Product;\n                GroupManagementForm groupForm = new GroupManagementForm(product);\n                if (groupForm.ShowDialog() == DialogResult.OK)\n                {\n                    LoadProductsAndGroups();\n                }\n            }\n        }\n\n        private void BtnExportExcel_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n                var products = (List<Product>)dgvProducts.DataSource;\n                \n                if (products == null || products.Count == 0)\n                {\n                    MessageBox.Show(\"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\", \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\",\n                        MessageBoxButtons.OK, MessageBoxIcon.Information);\n                    return;\n                }\n\n                // –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞\n                SaveFileDialog saveFileDialog = new SaveFileDialog();\n                saveFileDialog.Filter = \"CSV —Ñ–∞–π–ª—ã (*.csv)|*.csv|Excel —Ñ–∞–π–ª—ã (*.xlsx)|*.xlsx\";\n                saveFileDialog.FilterIndex = 1;\n                saveFileDialog.FileName = $\"warehouse_export_{DateTime.Now:yyyyMMdd_HHmmss}.csv\";\n\n                if (saveFileDialog.ShowDialog() == DialogResult.OK)\n                {\n                    ExportToCSV(products, saveFileDialog.FileName);\n                    \n                    MessageBox.Show($\"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª:\\n{saveFileDialog.FileName}\", \n                        \"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\",\n                        MessageBoxButtons.OK, \n                        MessageBoxIcon.Information);\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {ex.Message}\", \"–û—à–∏–±–∫–∞\",\n                    MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n\n        private void ExportToCSV(List<Product> products, string filePath)\n        {\n            using (var writer = new System.IO.StreamWriter(filePath, false, System.Text.Encoding.UTF8))\n            {\n                // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤\n                writer.WriteLine(\"ID,–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,–û–±—ä–µ–º,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,–°—Ç–∞—Ç—É—Å,–ì—Ä—É–ø–ø–∞,–¢–∏–ø,–£—á–∏—Ç—ã–≤–∞—Ç—å –≤ –∏—Ç–æ–≥–∞—Ö,–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è,–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\");\n\n                // –î–∞–Ω–Ω—ã–µ\n                foreach (var product in products)\n                {\n                    var line = $\"{EscapeCSV(product.Id.ToString())},\" +\n                              $\"{EscapeCSV(product.Name)},\" +\n                              $\"{EscapeCSV(product.Volume)},\" +\n                              $\"{EscapeCSV(product.Quantity.ToString())},\" +\n                              $\"{EscapeCSV(product.Status)},\" +\n                              $\"{EscapeCSV(product.Group)},\" +\n                              $\"{EscapeCSV(product.Type)},\" +\n                              $\"{EscapeCSV(product.CountInTotal ? \"–î–∞\" : \"–ù–µ—Ç\")},\" +\n                              $\"{EscapeCSV(product.AdditionalInfo)},\" +\n                              $\"{EscapeCSV(product.MsgSend ? \"–î–∞\" : \"–ù–µ—Ç\")}\";\n                    \n                    writer.WriteLine(line);\n                }\n            }\n        }\n\n        private string EscapeCSV(string value)\n        {\n            if (string.IsNullOrEmpty(value))\n                return \"\\\"\\\"\";\n\n            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫\n            if (value.Contains(\",\") || value.Contains(\"\\\"\") || value.Contains(\"\\n\") || value.Contains(\"\\r\"))\n            {\n                value = value.Replace(\"\\\"\", \"\\\"\\\"\");\n                return $\"\\\"{value}\\\"\";\n            }\n\n            return value;\n        }\n\n        private string ShowEmailInputDialog(string prompt)\n        {\n            Form inputForm = new Form()\n            {\n                Text = \"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\",\n                Width = 400,\n                Height = 160,\n                FormBorderStyle = FormBorderStyle.FixedDialog,\n                StartPosition = FormStartPosition.CenterParent,\n                MaximizeBox = false,\n                MinimizeBox = false\n            };\n\n            Label label = new Label()\n            {\n                Text = prompt,\n                Location = new Point(12, 15),\n                Size = new Size(360, 40),\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            TextBox textBox = new TextBox()\n            {\n                Location = new Point(12, 55),\n                Size = new Size(360, 20),\n                Font = new Font(\"Segoe UI\", 9)\n            };\n\n            Button okButton = new Button()\n            {\n                Text = \"OK\",\n                Location = new Point(217, 85),\n                Size = new Size(75, 23),\n                DialogResult = DialogResult.OK\n            };\n\n            Button cancelButton = new Button()\n            {\n                Text = \"–û—Ç–º–µ–Ω–∞\",\n                Location = new Point(297, 85),\n                Size = new Size(75, 23),\n                DialogResult = DialogResult.Cancel\n            };\n\n            inputForm.Controls.AddRange(new Control[] { label, textBox, okButton, cancelButton });\n            inputForm.AcceptButton = okButton;\n            inputForm.CancelButton = cancelButton;\n\n            return inputForm.ShowDialog() == DialogResult.OK ? textBox.Text : string.Empty;\n        }\n\n        /// <summary>\n        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞–º–∏\n        /// </summary>\n        private void BtnManageTypes_Click(object sender, EventArgs e)\n        {\n            ShowTypeManagementDialog();\n        }\n\n        /// <summary>\n        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞–º–∏\n        /// </summary>\n        private void ShowTypeManagementDialog()\n        {\n            Form typeForm = new Form()\n            {\n                Text = \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤\",\n                Width = 600,\n                Height = 500,\n                FormBorderStyle = FormBorderStyle.FixedDialog,\n                StartPosition = FormStartPosition.CenterParent,\n                MaximizeBox = false,\n                MinimizeBox = false\n            };\n\n            // ListBox –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–æ–≤\n            ListBox lstTypes = new ListBox()\n            {\n                Location = new Point(20, 20),\n                Size = new Size(400, 300),\n                Font = new Font(\"Segoe UI\", 10)\n            };\n\n            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n            Button btnAddType = new Button()\n            {\n                Text = \"‚ûï –î–æ–±–∞–≤–∏—Ç—å\",\n                Location = new Point(440, 20),\n                Size = new Size(120, 30),\n                BackColor = Color.FromArgb(40, 167, 69),\n                ForeColor = Color.White,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            Button btnEditType = new Button()\n            {\n                Text = \"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å\",\n                Location = new Point(440, 60),\n                Size = new Size(120, 30),\n                BackColor = Color.FromArgb(23, 162, 184),\n                ForeColor = Color.White,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            Button btnDeleteType = new Button()\n            {\n                Text = \"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å\",\n                Location = new Point(440, 100),\n                Size = new Size(120, 30),\n                BackColor = Color.FromArgb(220, 53, 69),\n                ForeColor = Color.White,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            Button btnRefresh = new Button()\n            {\n                Text = \"üîÑ –û–±–Ω–æ–≤–∏—Ç—å\",\n                Location = new Point(440, 140),\n                Size = new Size(120, 30),\n                BackColor = Color.FromArgb(108, 117, 125),\n                ForeColor = Color.White,\n                FlatStyle = FlatStyle.Flat\n            };\n\n            Button btnClose = new Button()\n            {\n                Text = \"–ó–∞–∫—Ä—ã—Ç—å\",\n                Location = new Point(440, 390),\n                Size = new Size(120, 30),\n                BackColor = Color.FromArgb(52, 73, 94),\n                ForeColor = Color.White,\n                FlatStyle = FlatStyle.Flat,\n                DialogResult = DialogResult.Cancel\n            };\n\n            // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤\n            Action loadTypes = () =>\n            {\n                try\n                {\n                    var types = ProductRepository.GetEditableStorageTypes();\n                    lstTypes.Items.Clear();\n                    foreach (var type in types)\n                    {\n                        lstTypes.Items.Add(type.Value);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤: {ex.Message}\", \"–û—à–∏–±–∫–∞\",\n                        MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }\n            };\n\n            // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞\n            string LocalShowInputDialog(string prompt, string title, string defaultValue = \"\")\n            {\n                Form inputForm = new Form()\n                {\n                    Text = title,\n                    Width = 400,\n                    Height = 160,\n                    FormBorderStyle = FormBorderStyle.FixedDialog,\n                    StartPosition = FormStartPosition.CenterParent,\n                    MaximizeBox = false,\n                    MinimizeBox = false\n                };\n\n                Label label = new Label()\n                {\n                    Text = prompt,\n                    Location = new Point(12, 15),\n                    Size = new Size(360, 40),\n                    Font = new Font(\"Segoe UI\", 9)\n                };\n\n                TextBox textBox = new TextBox()\n                {\n                    Location = new Point(12, 55),\n                    Size = new Size(360, 20),\n                    Font = new Font(\"Segoe UI\", 9),\n                    Text = defaultValue\n                };\n\n                Button okButton = new Button()\n                {\n                    Text = \"OK\",\n                    Location = new Point(217, 85),\n                    Size = new Size(75, 23),\n                    DialogResult = DialogResult.OK\n                };\n\n                Button cancelButton = new Button()\n                {\n                    Text = \"–û—Ç–º–µ–Ω–∞\",\n                    Location = new Point(297, 85),\n                    Size = new Size(75, 23),\n                    DialogResult = DialogResult.Cancel\n                };\n\n                inputForm.Controls.AddRange(new Control[] { label, textBox, okButton, cancelButton });\n                inputForm.AcceptButton = okButton;\n                inputForm.CancelButton = cancelButton;\n\n                return inputForm.ShowDialog() == DialogResult.OK ? textBox.Text : string.Empty;\n            }\n\n            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π\n            btnAddType.Click += (s, e) =>\n            {\n                string typeName = LocalShowInputDialog(\"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞:\", \"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞\");\n                if (!string.IsNullOrWhiteSpace(typeName))\n                {\n                    if (ProductRepository.AddStorageType(typeName.Trim()))\n                    {\n                        loadTypes();\n                        MessageBox.Show(\"–¢–∏–ø —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\", \"–£—Å–ø–µ—Ö\",\n                            MessageBoxButtons.OK, MessageBoxIcon.Information);\n                    }\n                }\n            };\n\n            btnEditType.Click += (s, e) =>\n            {\n                if (lstTypes.SelectedItem != null)\n                {\n                    string oldTypeName = lstTypes.SelectedItem.ToString();\n                    string newTypeName = LocalShowInputDialog($\"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ '{oldTypeName}':\", \"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞\", oldTypeName);\n                    \n                    if (!string.IsNullOrWhiteSpace(newTypeName) && newTypeName != oldTypeName)\n                    {\n                        if (ProductRepository.UpdateStorageType(oldTypeName, newTypeName.Trim()))\n                        {\n                            loadTypes();\n                            MessageBox.Show(\"–¢–∏–ø —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\", \"–£—Å–ø–µ—Ö\",\n                                MessageBoxButtons.OK, MessageBoxIcon.Information);\n                        }\n                    }\n                }\n                else\n                {\n                    MessageBox.Show(\"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\", \"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\",\n                        MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                }\n            };\n\n            btnDeleteType.Click += (s, e) =>\n            {\n                if (lstTypes.SelectedItem != null)\n                {\n                    string typeName = lstTypes.SelectedItem.ToString();\n                    var result = MessageBox.Show($\"–£–¥–∞–ª–∏—Ç—å —Ç–∏–ø '{typeName}'?\\n\\n–í–Ω–∏–º–∞–Ω–∏–µ: –¢–∏–ø –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è.\", \n                        \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);\n                    \n                    if (result == DialogResult.Yes)\n                    {\n                        if (ProductRepository.RemoveStorageType(typeName))\n                        {\n                            loadTypes();\n                            MessageBox.Show(\"–¢–∏–ø —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\", \"–£—Å–ø–µ—Ö\",\n                                MessageBoxButtons.OK, MessageBoxIcon.Information);\n                        }\n                    }\n                }\n                else\n                {\n                    MessageBox.Show(\"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\", \"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\",\n                        MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                }\n            };\n\n            btnRefresh.Click += (s, e) => loadTypes();\n\n            typeForm.Controls.AddRange(new Control[] {\n                lstTypes, btnAddType, btnEditType, btnDeleteType, btnRefresh, btnClose\n            });\n\n            typeForm.CancelButton = btnClose;\n\n            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã\n            loadTypes();\n\n            typeForm.ShowDialog();\n        }\n\n        public TabPage GetTabPage()\n        {\n            return tabPage;\n        }\n    }\n}","size_bytes":53722},"OfficeApp.Console/Program.cs":{"content":"using MySqlConnector;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace OfficeApp.Console\n{\n    class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string Volume { get; set; } = string.Empty;\n        public int Quantity { get; set; }\n        public string Status { get; set; } = string.Empty;\n        public string Group { get; set; } = string.Empty;\n    }\n\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            System.Console.WriteLine(\"=== Office App Console - Database Test ===\");\n            System.Console.WriteLine($\"Starting at: {DateTime.Now}\");\n            System.Console.WriteLine();\n\n            // Get connection string from environment - required for security\n            string? connectionString = Environment.GetEnvironmentVariable(\"DATABASE_CONNECTION_STRING\");\n            \n            if (string.IsNullOrEmpty(connectionString))\n            {\n                System.Console.WriteLine(\"‚ùå DATABASE_CONNECTION_STRING environment variable not set\");\n                System.Console.WriteLine(\"Please set the database connection string in environment variables for security.\");\n                Environment.Exit(1);\n                return;\n            }\n\n            try\n            {\n                await TestDatabaseConnection(connectionString);\n                await TestWarehouseFunctionality(connectionString);\n                \n                System.Console.WriteLine();\n                System.Console.WriteLine(\"=== All tests completed successfully! ===\");\n            }\n            catch (Exception ex)\n            {\n                System.Console.WriteLine($\"‚ùå Critical Error: {ex.Message}\");\n                Environment.Exit(1);\n            }\n        }\n\n        static async Task TestDatabaseConnection(string connectionString)\n        {\n            System.Console.WriteLine(\"üîç Testing database connection...\");\n            \n            using var connection = new MySqlConnection(connectionString);\n            await connection.OpenAsync();\n            \n            using var command = new MySqlCommand(\"SELECT 1\", connection);\n            var result = await command.ExecuteScalarAsync();\n            \n            if (result?.ToString() == \"1\")\n            {\n                System.Console.WriteLine(\"‚úÖ Database connection successful!\");\n                \n                // Connection info (sensitive details masked)\n                var builder = new MySqlConnectionStringBuilder(connectionString);\n                System.Console.WriteLine($\"   Server: {MaskSensitiveString(builder.Server)}\");\n                System.Console.WriteLine($\"   Database: {builder.Database}\");\n                System.Console.WriteLine($\"   Connection successful\");\n            }\n            else\n            {\n                throw new Exception(\"Database connection test failed\");\n            }\n        }\n\n        static async Task TestWarehouseFunctionality(string connectionString)\n        {\n            System.Console.WriteLine();\n            System.Console.WriteLine(\"üì¶ Testing warehouse functionality...\");\n            \n            using var connection = new MySqlConnection(connectionString);\n            await connection.OpenAsync();\n\n            // Check office_storage table structure\n            await ExamineOfficeStorageTable(connection);\n            \n            // Check office_storage_options table structure  \n            await ExamineOfficeStorageOptionsTable(connection);\n            \n            // Test office_storage data\n            await TestOfficeStorageData(connection);\n        }\n\n        static async Task ExamineOfficeStorageTable(MySqlConnection connection)\n        {\n            System.Console.WriteLine(\"\\nüóÑÔ∏è  Examining office_storage table structure:\");\n            \n            try\n            {\n                var query = \"SHOW COLUMNS FROM office_storage\";\n                using var command = new MySqlCommand(query, connection);\n                using var reader = await command.ExecuteReaderAsync();\n                \n                System.Console.WriteLine(\"   Columns:\");\n                while (await reader.ReadAsync())\n                {\n                    var field = reader.GetString(0);\n                    var type = reader.GetString(1);\n                    var nullable = reader.GetString(2);\n                    var key = reader.IsDBNull(3) ? \"\" : reader.GetString(3);\n                    var defaultValue = reader.IsDBNull(4) ? \"NULL\" : reader.GetString(4);\n                    \n                    System.Console.WriteLine($\"   ‚Ä¢ {field}: {type} (Null: {nullable}, Key: {key}, Default: {defaultValue})\");\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Console.WriteLine($\"   ‚ùå Error examining office_storage: {ex.Message}\");\n            }\n        }\n\n        static async Task ExamineOfficeStorageOptionsTable(MySqlConnection connection)\n        {\n            System.Console.WriteLine(\"\\n‚öôÔ∏è  Examining office_storage_options table structure:\");\n            \n            try\n            {\n                var query = \"SHOW COLUMNS FROM office_storage_options\";\n                using var command = new MySqlCommand(query, connection);\n                using var reader = await command.ExecuteReaderAsync();\n                \n                System.Console.WriteLine(\"   Columns:\");\n                while (await reader.ReadAsync())\n                {\n                    var field = reader.GetString(0);\n                    var type = reader.GetString(1);\n                    var nullable = reader.GetString(2);\n                    var key = reader.IsDBNull(3) ? \"\" : reader.GetString(3);\n                    var defaultValue = reader.IsDBNull(4) ? \"NULL\" : reader.GetString(4);\n                    \n                    System.Console.WriteLine($\"   ‚Ä¢ {field}: {type} (Null: {nullable}, Key: {key}, Default: {defaultValue})\");\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Console.WriteLine($\"   ‚ùå Error examining office_storage_options: {ex.Message}\");\n            }\n        }\n        \n        static async Task TestOfficeStorageData(MySqlConnection connection)\n        {\n            System.Console.WriteLine(\"\\nüìä Testing office_storage data:\");\n            \n            try\n            {\n                // Check basic data\n                var countQuery = \"SELECT COUNT(*) FROM office_storage\";\n                using var countCmd = new MySqlCommand(countQuery, connection);\n                var count = Convert.ToInt32(await countCmd.ExecuteScalarAsync());\n                System.Console.WriteLine($\"   ‚Ä¢ Total items in storage: {count}\");\n                \n                if (count > 0)\n                {\n                    // Sample some data\n                    var sampleQuery = \"SELECT id, name, volume, quantity, status, COALESCE(group_name, 'No Group') as group_name FROM office_storage LIMIT 3\";\n                    using var sampleCmd = new MySqlCommand(sampleQuery, connection);\n                    using var reader = await sampleCmd.ExecuteReaderAsync();\n                    \n                    System.Console.WriteLine(\"   Sample items:\");\n                    while (await reader.ReadAsync())\n                    {\n                        System.Console.WriteLine($\"   ‚Ä¢ ID: {reader[\"id\"]}, Name: {reader[\"name\"]}, Volume: {reader[\"volume\"]}, Qty: {reader[\"quantity\"]}, Status: {reader[\"status\"]}, Group: {reader[\"group_name\"]}\");\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Console.WriteLine($\"   ‚ùå Error testing office_storage data: {ex.Message}\");\n            }\n            \n            System.Console.WriteLine(\"\\nüîß Testing office_storage_options data:\");\n            \n            try\n            {\n                // Check options data including enable column and new option types\n                var optionsQuery = @\"\n                    SELECT option_type, \n                           COUNT(*) as total_count,\n                           SUM(CASE WHEN `enable` = 1 THEN 1 ELSE 0 END) as enabled_count,\n                           SUM(CASE WHEN `enable` = 0 THEN 1 ELSE 0 END) as disabled_count\n                    FROM office_storage_options \n                    GROUP BY option_type\";\n                using var optionsCmd = new MySqlCommand(optionsQuery, connection);\n                using var reader = await optionsCmd.ExecuteReaderAsync();\n                \n                System.Console.WriteLine(\"   Option types summary:\");\n                while (await reader.ReadAsync())\n                {\n                    System.Console.WriteLine($\"   ‚Ä¢ {reader[\"option_type\"]}: {reader[\"total_count\"]} total ({reader[\"enabled_count\"]} enabled, {reader[\"disabled_count\"]} disabled)\");\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Console.WriteLine($\"   ‚ùå Error testing office_storage_options data: {ex.Message}\");\n            }\n            \n            try\n            {\n                // Show samples of each option type\n                var sampleQuery = \"SELECT * FROM office_storage_options ORDER BY option_type, value LIMIT 10\";\n                using var sampleCmd = new MySqlCommand(sampleQuery, connection);\n                using var reader = await sampleCmd.ExecuteReaderAsync();\n                \n                System.Console.WriteLine(\"   Sample options:\");\n                while (await reader.ReadAsync())\n                {\n                    var enable = \"NULL\";\n                    try \n                    {\n                        var enableIndex = -1;\n                        for (int i = 0; i < reader.FieldCount; i++)\n                        {\n                            if (reader.GetName(i).Equals(\"enable\", StringComparison.OrdinalIgnoreCase))\n                            {\n                                enableIndex = i;\n                                break;\n                            }\n                        }\n                        if (enableIndex >= 0 && !reader.IsDBNull(enableIndex))\n                        {\n                            enable = reader.GetInt32(enableIndex).ToString();\n                        }\n                    }\n                    catch \n                    {\n                        enable = \"N/A\";\n                    }\n                    System.Console.WriteLine($\"   ‚Ä¢ Type: {reader[\"option_type\"]}, Value: {reader[\"value\"]}, Enabled: {enable}\");\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Console.WriteLine($\"   ‚ùå Error showing sample options: {ex.Message}\");\n            }\n        }\n        static string MaskSensitiveString(string input)\n        {\n            if (string.IsNullOrEmpty(input) || input.Length <= 4)\n                return \"***\";\n            \n            return input.Substring(0, 2) + new string('*', Math.Max(1, input.Length - 4)) + input.Substring(input.Length - 2);\n        }\n    }\n}","size_bytes":11139},"Properties/AssemblyInfo.cs":{"content":"Ôªøusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ–± —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–±–æ—Ä–æ–º\n// –Ω–∞–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π,\n// —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–±–æ—Ä–∫–æ–π.\n[assembly: AssemblyTitle(\"2v5.officeApp\")]\n[assembly: AssemblyDescription(\"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Å–æ–º\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"2v5.officeApp\")]\n[assembly: AssemblyCopyright(\"Copyright ¬©  2025\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è False –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ComVisible –¥–µ–ª–∞–µ—Ç —Ç–∏–ø—ã –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ –Ω–µ–≤–∏–¥–∏–º—ã–º–∏\n// –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ COM. –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–∏–ø—É –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ —á–µ—Ä–µ–∑\n// COM, —Å–ª–µ–¥—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç ComVisible –≤ TRUE –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.\n[assembly: ComVisible(false)]\n\n// –°–ª–µ–¥—É—é—â–∏–π GUID —Å–ª—É–∂–∏—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–∏–ø–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –≤–∏–¥–∏–º—ã–º –¥–ª—è COM\n[assembly: Guid(\"59ec4518-fec9-470e-aad7-cd2980bb997a\")]\n\n// –°–≤–µ–¥–µ–Ω–∏—è –æ –≤–µ—Ä—Å–∏–∏ —Å–±–æ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ —á–µ—Ç—ã—Ä–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π:\n//\n//      –û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏\n//      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏\n//      –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏\n//      –†–µ–¥–∞–∫—Ü–∏—è\n//\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n","size_bytes":1830},"Properties/Resources.Designer.cs":{"content":"Ôªø//------------------------------------------------------------------------------\n// <auto-generated>\n//     –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.\n//     –ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è –≤–µ—Ä—Å–∏—è:4.0.30319.42000\n//\n//     –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –≤ —Å–ª—É—á–∞–µ\n//     –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace _2v5.officeApp.Properties {\n    using System;\n    \n    \n    /// <summary>\n    ///   –ö–ª–∞—Å—Å —Ä–µ—Å—É—Ä—Å–∞ —Å–æ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏ —Ç.–¥.\n    /// </summary>\n    // –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∞—Å—Å–æ–º StronglyTypedResourceBuilder\n    // —Å –ø–æ–º–æ—â—å—é —Ç–∞–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–∞–∫ ResGen –∏–ª–∏ Visual Studio.\n    // –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —á–ª–µ–Ω, –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª .ResX –∏ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ ResGen\n    // —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º /str –∏–ª–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç VS.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"17.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources() {\n        }\n        \n        /// <summary>\n        ///   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ResourceManager, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"_2v5.officeApp.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ CurrentUICulture —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö\n        ///   –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Ä–µ—Å—É—Ä—Å—É —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ä–µ—Å—É—Ä—Å–∞ —Å–æ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n    }\n}\n","size_bytes":3376},"Properties/Settings.Designer.cs":{"content":"Ôªø//------------------------------------------------------------------------------\n// <auto-generated>\n//     –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.\n//     –ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è –≤–µ—Ä—Å–∏—è:4.0.30319.42000\n//\n//     –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –≤ —Å–ª—É—á–∞–µ\n//     –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace _2v5.officeApp.Properties {\n    \n    \n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"17.14.0.0\")]\n    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {\n        \n        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        \n        public static Settings Default {\n            get {\n                return defaultInstance;\n            }\n        }\n    }\n}\n","size_bytes":1219},"Utilities/PasswordHasher.cs":{"content":"Ôªønamespace officeApp.Utilities\n{\n    public static class PasswordHasher\n    {\n        public static bool VerifyPassword(string inputPassword, string storedPassword)\n        {\n            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –±–µ–∑ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n            return inputPassword == storedPassword;\n        }\n    }\n}","size_bytes":336},"OfficeApp.Console/obj/Debug/net8.0/OfficeApp.Console.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"OfficeApp.Console\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+83c95fb14234f512933878ba2cc79cab91743b76\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"OfficeApp.Console\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"OfficeApp.Console\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1003},"OfficeApp.Console/obj/Debug/net8.0/OfficeApp.Console.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"obj/Debug/net7.0-windows/2v5.officeApp.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.Drawing;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\nglobal using global::System.Windows.Forms;\n","size_bytes":367},"OfficeApp.Console/obj/Debug/net7.0/.NETCoreApp,Version=v7.0.AssemblyAttributes.cs":{"content":"// <autogenerated />\r\nusing System;\r\nusing System.Reflection;\r\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETCoreApp,Version=v7.0\", FrameworkDisplayName = \".NET 7.0\")]\n","size_bytes":197},"OfficeApp.Console/obj/Debug/net7.0/OfficeApp.Console.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"OfficeApp.Console\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+6f1cd2110e0a4c96e2c9ce7030c2f7308abad4ee\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"OfficeApp.Console\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"OfficeApp.Console\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1003},"OfficeApp.Console/obj/Debug/net7.0/OfficeApp.Console.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"Services/UpdateService.cs":{"content":"using System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing officeApp.DataAccess;\n\nnamespace officeApp.Services\n{\n    /// <summary>\n    /// –°–ª—É–∂–±–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n    /// </summary>\n    public static class UpdateService\n    {\n        private static readonly HttpClient httpClient = new HttpClient\n        {\n            Timeout = TimeSpan.FromMinutes(10)\n        };\n\n        private const string UPDATE_SERVER_URL = \"https://mwj-2v5.ru/officeApp\";\n        private const long MAX_FILE_SIZE = 100 * 1024 * 1024; // 100 MB\n\n        /// <summary>\n        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n        /// </summary>\n        public static UpdateCheckResult CheckForUpdates()\n        {\n            try\n            {\n                string currentVersion = ProductRepository.GetCurrentAppVersion();\n                string databaseVersion = ProductRepository.GetAppVersionFromDatabase();\n\n                return new UpdateCheckResult\n                {\n                    HasUpdate = !currentVersion.Equals(databaseVersion),\n                    CurrentVersion = currentVersion,\n                    AvailableVersion = databaseVersion,\n                    IsSuccess = true\n                };\n            }\n            catch (Exception ex)\n            {\n                return new UpdateCheckResult\n                {\n                    IsSuccess = false,\n                    ErrorMessage = $\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {ex.Message}\"\n                };\n            }\n        }\n\n        /// <summary>\n        /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n        /// </summary>\n        public static async Task<bool> DownloadUpdateAsync(string version, IProgress<int> progress = null, CancellationToken cancellationToken = default)\n        {\n            try\n            {\n                // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è path traversal –∞—Ç–∞–∫\n                if (!IsValidVersionFormat(version))\n                {\n                    MessageBox.Show($\"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {version}\", \"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\", \n                        MessageBoxButtons.OK, MessageBoxIcon.Error);\n                    return false;\n                }\n\n                string sanitizedVersion = SanitizeVersionString(version);\n                string fileName = $\"OfficeApp_{sanitizedVersion}.zip\";\n                string fileUrl = $\"{UPDATE_SERVER_URL}/{fileName}\";\n                string downloadPath = Path.Combine(Path.GetTempPath(), fileName);\n\n                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS\n                if (!IsValidHttpsUrl(fileUrl))\n                {\n                    MessageBox.Show(\"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ HTTPS.\");\n                    return false;\n                }\n\n                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n                using var response = await httpClient.GetAsync(fileUrl, HttpCompletionOption.ResponseHeadersRead, cancellationToken);\n                response.EnsureSuccessStatusCode();\n\n                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n                var contentLength = response.Content.Headers.ContentLength;\n                if (contentLength.HasValue && contentLength.Value > MAX_FILE_SIZE)\n                {\n                    MessageBox.Show($\"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π ({MAX_FILE_SIZE / (1024 * 1024)} –ú–ë)\");\n                    return false;\n                }\n\n                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n                await using var contentStream = await response.Content.ReadAsStreamAsync(cancellationToken);\n                await using var fileStream = new FileStream(downloadPath, FileMode.Create, FileAccess.Write);\n\n                var buffer = new byte[8192];\n                long totalBytesRead = 0;\n                int bytesRead;\n                long totalBytes = contentLength ?? 0;\n\n                while ((bytesRead = await contentStream.ReadAsync(buffer, 0, buffer.Length, cancellationToken)) > 0)\n                {\n                    totalBytesRead += bytesRead;\n                    \n                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏\n                    if (totalBytesRead > MAX_FILE_SIZE)\n                    {\n                        File.Delete(downloadPath);\n                        MessageBox.Show(\"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏\");\n                        return false;\n                    }\n\n                    await fileStream.WriteAsync(buffer, 0, bytesRead, cancellationToken);\n\n                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å\n                    if (progress != null && totalBytes > 0)\n                    {\n                        int progressPercent = (int)((totalBytesRead * 100) / totalBytes);\n                        progress.Report(progressPercent);\n                    }\n                }\n\n                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ\n                if (File.Exists(downloadPath) && new FileInfo(downloadPath).Length > 0)\n                {\n                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à)\n                    string expectedHash = GetExpectedFileHash(sanitizedVersion);\n                    if (!string.IsNullOrEmpty(expectedHash))\n                    {\n                        string actualHash = await CalculateFileHashAsync(downloadPath);\n                        if (!string.Equals(expectedHash, actualHash, StringComparison.OrdinalIgnoreCase))\n                        {\n                            File.Delete(downloadPath); // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n                            MessageBox.Show(\"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø–æ–¥–¥–µ–ª–∞–Ω.\", \n                                \"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                            return false;\n                        }\n                    }\n\n                    MessageBox.Show($\"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {downloadPath}\", \"–£—Å–ø–µ—Ö\", \n                        MessageBoxButtons.OK, MessageBoxIcon.Information);\n                    return true;\n                }\n\n                return false;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}\", \"–û—à–∏–±–∫–∞\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –±–µ–∑–æ–ø–∞—Å–Ω—ã–º (HTTPS)\n        /// </summary>\n        private static bool IsValidHttpsUrl(string url)\n        {\n            return Uri.TryCreate(url, UriKind.Absolute, out Uri uri) && uri.Scheme == Uri.UriSchemeHttps;\n        }\n\n        /// <summary>\n        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã)\n        /// </summary>\n        private static bool IsValidVersionFormat(string version)\n        {\n            if (string.IsNullOrWhiteSpace(version))\n                return false;\n\n            // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ –±—É–∫–≤—ã –¥–ª—è –≤–µ—Ä—Å–∏–π —Ç–∏–ø–∞ \"1.2.3\" –∏–ª–∏ \"1.2.3-beta\"\n            var versionPattern = @\"^[0-9]+(\\.[0-9]+)*(-[a-zA-Z0-9]+)*$\";\n            return Regex.IsMatch(version, versionPattern) && version.Length <= 50;\n        }\n\n        /// <summary>\n        /// –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–µ—Ä—Å–∏–∏ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n        /// </summary>\n        private static string SanitizeVersionString(string version)\n        {\n            if (string.IsNullOrWhiteSpace(version))\n                return \"unknown\";\n\n            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö\n            return Regex.Replace(version, @\"[^0-9a-zA-Z\\.\\-]\", \"\");\n        }\n\n        /// <summary>\n        /// –í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö–µ—à —Ñ–∞–π–ª–∞\n        /// </summary>\n        private static async Task<string> CalculateFileHashAsync(string filePath)\n        {\n            using var sha256 = SHA256.Create();\n            await using var stream = File.OpenRead(filePath);\n            var hashBytes = await sha256.ComputeHashAsync(stream);\n            return Convert.ToHexString(hashBytes);\n        }\n\n        /// <summary>\n        /// –ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n        /// </summary>\n        private static string GetExpectedFileHash(string version)\n        {\n            try\n            {\n                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ—Ç —Ö–µ—à –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ë–î –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n                // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–µ—à–∞)\n                return string.Empty;\n            }\n            catch\n            {\n                return string.Empty;\n            }\n        }\n\n        /// <summary>\n        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏\n        /// </summary>\n        public static async Task<bool> ShowUpdateDialogAsync()\n        {\n            var updateCheck = CheckForUpdates();\n            \n            if (!updateCheck.IsSuccess)\n            {\n                MessageBox.Show(updateCheck.ErrorMessage, \"–û—à–∏–±–∫–∞\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                return false;\n            }\n\n            if (!updateCheck.HasUpdate)\n            {\n                MessageBox.Show($\"–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {updateCheck.CurrentVersion}\", \"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                return false;\n            }\n\n            string message = $\"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!\\n\\n\" +\n                           $\"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {updateCheck.CurrentVersion}\\n\" +\n                           $\"–î–æ—Å—Ç—É–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: {updateCheck.AvailableVersion}\\n\\n\" +\n                           $\"–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?\";\n\n            var result = MessageBox.Show(message, \"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\", MessageBoxButtons.YesNo, MessageBoxIcon.Question);\n\n            if (result == DialogResult.Yes)\n            {\n                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∏–∞–ª–æ–≥\n                var progressDialog = new Form\n                {\n                    Text = \"–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...\",\n                    Size = new System.Drawing.Size(400, 120),\n                    FormBorderStyle = FormBorderStyle.FixedDialog,\n                    MaximizeBox = false,\n                    MinimizeBox = false,\n                    StartPosition = FormStartPosition.CenterParent\n                };\n\n                var progressBar = new ProgressBar\n                {\n                    Location = new System.Drawing.Point(20, 20),\n                    Size = new System.Drawing.Size(340, 30),\n                    Minimum = 0,\n                    Maximum = 100\n                };\n\n                var statusLabel = new Label\n                {\n                    Location = new System.Drawing.Point(20, 60),\n                    Size = new System.Drawing.Size(340, 20),\n                    Text = \"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...\"\n                };\n\n                progressDialog.Controls.AddRange(new Control[] { progressBar, statusLabel });\n\n                var progress = new Progress<int>(percent =>\n                {\n                    if (progressDialog.InvokeRequired)\n                    {\n                        progressDialog.Invoke(new Action(() =>\n                        {\n                            progressBar.Value = percent;\n                            statusLabel.Text = $\"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {percent}%\";\n                        }));\n                    }\n                    else\n                    {\n                        progressBar.Value = percent;\n                        statusLabel.Text = $\"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {percent}%\";\n                    }\n                });\n\n                progressDialog.Show();\n\n                try\n                {\n                    bool downloadSuccess = await DownloadUpdateAsync(updateCheck.AvailableVersion, progress);\n                    progressDialog.Close();\n                    \n                    if (downloadSuccess)\n                    {\n                        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ AssemblyInfo –Ω–∞ –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î\n                        ProductRepository.UpdateAppVersionInDatabase(updateCheck.AvailableVersion);\n                        return true;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    progressDialog.Close();\n                    MessageBox.Show($\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {ex.Message}\", \"–û—à–∏–±–∫–∞\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }\n            }\n\n            return false;\n        }\n    }\n\n    /// <summary>\n    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n    /// </summary>\n    public class UpdateCheckResult\n    {\n        public bool HasUpdate { get; set; }\n        public string CurrentVersion { get; set; } = string.Empty;\n        public string AvailableVersion { get; set; } = string.Empty;\n        public bool IsSuccess { get; set; }\n        public string ErrorMessage { get; set; } = string.Empty;\n    }\n}","size_bytes":14525}},"version":1}